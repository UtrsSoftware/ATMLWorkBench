<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAAAGABoAwAAJgAAACAgAAAAABgAqAwAAI4DAAAoAAAAEAAAACAAAAABABgAAAAAAAAD
        AAAAAAAAAAAAAAAAAAAAAAAABAQEBAQEBAQEBAQEBAQEBAQEBAQE8/PzzMzM8/PzBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEu9vqKbHtu9vqBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEBAQEBAQEkMvnKK/tkMvnBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEcr/jKLHucr/jBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQERrLkLLr3RrLk
        BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE9vb2JKnoMcX/JKnp9vb2BAQEBAQEBAQE
        BAQEBAQEBAQEBAQEBAQEBAQEBAQE8fHxsMbRJKvrOsv/JKvrsMbR8fHxBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQE8fHxnsLUHqPmQMT8SdH/Qsj9HqPmnsLU8fHxBAQEBAQEBAQEBAQEBAQEBAQEBAQEnMLUIabo
        UM79U9X/Udn6U9X/UM39IabonMLUBAQEBAQEBAQEBAQEBAQEBAQEBAQEIaPlWdD7VtX9R9D3R9D3R9D3
        VtX9WdD7IaPlBAQEBAQEBAQEBAQEBAQEBAQEBAQEGqDlfeX/PMf0P8j1QMj1P8j1PMf0feX/GqDlBAQE
        BAQEBAQEBAQEBAQEBAQEBAQEGJ7kjuv/M73xN7/yOcDyN7/yM73xjuv/GJ7kBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEFp3kofT/MLjuLbbuL7fuLbbuL7juofT/Fp3kBAQEBAQEBAQEBAQEBAQEBAQEBAQEU7Xpa9D1
        heP9KK/sHqvrJ6/sjef+a9D1U7XpBAQEBAQEBAQEBAQEBAQEBAQEBAQE8/r+E5ridNP1wv//wf//wv//
        c9P1E5ri8/r+BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE8/r+UbTpEZjhEJfgEZjhUbTp8/r+BAQEBAQE
        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
        AP//gAH//+AH/w==
</value>
  </data>
</root>