// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.0.0.283
//    <NameSpace>ATMLCommonLibrary.model.equipment</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><InitializeFields>None</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>True</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>True</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><GenerateShouldSerialize>True</GenerateShouldSerialize><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings>ATMLCommonLibrary.model.common</CustomUsings>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace ATMLModelLibrary.model.equipment
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using ATMLModelLibrary.model.common;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    /// <summary>
    /// Base type: Extension of c:ItemDescription
    /// Properties: base c:ItemDescription, abstract true
    /// The HardwareItemDescription complex type shall be the base type for XML schema elements intended to describe hardware entities. Derived types include InstrumentDescription.xsd, UUTDescription.xsd, TestStation.xsd, and TestAdapter.xsd.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public abstract partial class HardwareItemDescription : ItemDescription
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<object> _interface;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<HardwareItemDescriptionComponent> _components;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<HardwareItemDescriptionComponent1> _parentComponents;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private HardwareItemDescriptionControl _control;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Document> _documentation;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<HardwareItemDescriptionOption> _configurationOptions;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<NamedValue> _factoryDefaults;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<HardwareItemDescriptionCalibrationRequirement> _calibrationRequirements;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private OperationalRequirements _operationalRequirements;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private EnvironmentalRequirements _environmentalRequirements;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<object> _powerRequirements;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private PhysicalCharacteristics _physicalCharacteristics;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<HardwareItemDescriptionError> _errors;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Network> _networkList;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private HardwareItemDescriptionLegalDocuments _legalDocuments;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:PhysicalInterface
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Interface child element shall identify the electrical interfaces to the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 0)]
        [XmlArrayItemAttribute("Connectors", typeof(PhysicalInterfaceConnectors), Namespace = "urn:IEEE-1671:2010:Common", IsNullable = false)]
        [XmlArrayItemAttribute("Ports", typeof(PhysicalInterfacePorts), Namespace = "urn:IEEE-1671:2010:Common", IsNullable = false)]
        public List<object> Interface
        {
            get
            {
                return _interface;
            }
            set
            {
                _interface = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Components child element shall be a collector element of the identification of the subassemblies to the subject hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute("Component", IsNullable = false)]
        public List<HardwareItemDescriptionComponent> Components
        {
            get
            {
                return _components;
            }
            set
            {
                _components = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/ParentComponents child element shall be a collector element of the identification of the next-higher assembly of the subject hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 2)]
        [XmlArrayItemAttribute("Component", IsNullable = false)]
        public List<HardwareItemDescriptionComponent1> ParentComponents
        {
            get
            {
                return _parentComponents;
            }
            set
            {
                _parentComponents = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control child element shall be a collector element of control languages, drivers, extension, firmwares, and tools for the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 3)]
        public HardwareItemDescriptionControl Control
        {
            get
            {
                return _control;
            }
            set
            {
                _control = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Documentation child element shall be a collector element of the documentation of the subject hardware item to be assembled.
        /// </summary>
        [XmlArrayAttribute(Order = 4)]
        [XmlArrayItemAttribute(IsNullable = false)]
        public List<Document> Documentation
        {
            get
            {
                return _documentation;
            }
            set
            {
                _documentation = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/ConfigurationOptions child element shall identify the configuration option(s) of the hardware item. These options are values the user can modify, which will persist after a power cycle of the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 5)]
        [XmlArrayItemAttribute("Option", IsNullable = false)]
        public List<HardwareItemDescriptionOption> ConfigurationOptions
        {
            get
            {
                return _configurationOptions;
            }
            set
            {
                _configurationOptions = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/FactoryDefaults child element shall identify the default factory settings of the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 6)]
        [XmlArrayItemAttribute("Default", IsNullable = false)]
        public List<NamedValue> FactoryDefaults
        {
            get
            {
                return _factoryDefaults;
            }
            set
            {
                _factoryDefaults = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/CalibrationRequirements child element shall identify the calibration requirements of the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 7)]
        [XmlArrayItemAttribute("CalibrationRequirement", IsNullable = false)]
        public List<HardwareItemDescriptionCalibrationRequirement> CalibrationRequirements
        {
            get
            {
                return _calibrationRequirements;
            }
            set
            {
                _calibrationRequirements = value;
            }
        }

        /// <summary>
        /// Base type: hc:OperationalRequirements
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/OperationalRequirements child element shall identify the operational requirements of the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 8)]
        public OperationalRequirements OperationalRequirements
        {
            get
            {
                return _operationalRequirements;
            }
            set
            {
                _operationalRequirements = value;
            }
        }

        /// <summary>
        /// Base type: c:EnvironmentalRequirements
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/EnvironmentalRequirements child element shall identify the operational and/or storage and transport requirements for the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 9)]
        public EnvironmentalRequirements EnvironmentalRequirements
        {
            get
            {
                return _environmentalRequirements;
            }
            set
            {
                _environmentalRequirements = value;
            }
        }

        /// <summary>
        /// Base type: hc:PowerSpecifications
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/PowerRequirements child element shall be a collector element of the identification of ac or dc power requirements for the subject hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 10)]
        [XmlArrayItemAttribute("AC", typeof(PowerSpecificationsAC), IsNullable = false)]
        [XmlArrayItemAttribute("DC", typeof(PowerSpecificationsDC), IsNullable = false)]
        public List<object> PowerRequirements
        {
            get
            {
                return _powerRequirements;
            }
            set
            {
                _powerRequirements = value;
            }
        }

        /// <summary>
        /// Base type: hc:PhysicalCharacteristics
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/PhysicalCharacteristics child element shall be a collector element of the identification of the mass, volume, and measurements for the subject hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 11)]
        public PhysicalCharacteristics PhysicalCharacteristics
        {
            get
            {
                return _physicalCharacteristics;
            }
            set
            {
                _physicalCharacteristics = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Errors child element shall identify the type, source, and identification of all errors associated with the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 12)]
        [XmlArrayItemAttribute("Error", IsNullable = false)]
        public List<HardwareItemDescriptionError> Errors
        {
            get
            {
                return _errors;
            }
            set
            {
                _errors = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/NetworkList child element shall identify how the each port on the hardware item is connected.
        /// </summary>
        [XmlArrayAttribute(Order = 13)]
        [XmlArrayItemAttribute(IsNullable = false)]
        public List<Network> NetworkList
        {
            get
            {
                return _networkList;
            }
            set
            {
                _networkList = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/LegalDocuments child element shall be a collector element of legal documents for the subject hardware item to be assembled.
        /// </summary>
        [XmlElementAttribute(Order = 14)]
        public HardwareItemDescriptionLegalDocuments LegalDocuments
        {
            get
            {
                return _legalDocuments;
            }
            set
            {
                _legalDocuments = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescription));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Interface should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInterface()
        {
            return Interface != null && Interface.Count > 0;
        }

        /// <summary>
        /// Test whether Components should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComponents()
        {
            return Components != null && Components.Count > 0;
        }

        /// <summary>
        /// Test whether ParentComponents should be serialized
        /// </summary>
        public virtual bool ShouldSerializeParentComponents()
        {
            return ParentComponents != null && ParentComponents.Count > 0;
        }

        /// <summary>
        /// Test whether Documentation should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDocumentation()
        {
            return Documentation != null && Documentation.Count > 0;
        }

        /// <summary>
        /// Test whether ConfigurationOptions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeConfigurationOptions()
        {
            return ConfigurationOptions != null && ConfigurationOptions.Count > 0;
        }

        /// <summary>
        /// Test whether FactoryDefaults should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFactoryDefaults()
        {
            return FactoryDefaults != null && FactoryDefaults.Count > 0;
        }

        /// <summary>
        /// Test whether CalibrationRequirements should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCalibrationRequirements()
        {
            return CalibrationRequirements != null && CalibrationRequirements.Count > 0;
        }

        /// <summary>
        /// Test whether PowerRequirements should be serialized
        /// </summary>
        public virtual bool ShouldSerializePowerRequirements()
        {
            return PowerRequirements != null && PowerRequirements.Count > 0;
        }

        /// <summary>
        /// Test whether Errors should be serialized
        /// </summary>
        public virtual bool ShouldSerializeErrors()
        {
            return Errors != null && Errors.Count > 0;
        }

        /// <summary>
        /// Test whether NetworkList should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNetworkList()
        {
            return NetworkList != null && NetworkList.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescription object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescription object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescription object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescription obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescription);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescription obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static HardwareItemDescription Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescription)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescription Deserialize(Stream s)
        {
            return ((HardwareItemDescription)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescription object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescription object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescription object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescription obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescription);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescription obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static HardwareItemDescription LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The NetworkNode complex type shall be the base type for XML schema elements intended to document properties of the network node to which the hardware item is connected.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class NetworkNode
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private NetworkNodePath _path;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Extension _extension;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: Extension of c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whitespace replace
        /// The NetworkNode/Path child element describes the XPath expression that shall evaluate to a single node. This single node is part of the path.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public NetworkNodePath Path
        {
            get
            {
                return _path;
            }
            set
            {
                _path = value;
            }
        }

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whitespace replace
        /// The NetworkNode/Description child element shall describe the network node to which the hardware item is connected.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// Base type: c:Extension
        /// Properties: isRef 0, content complex
        /// The NetworkNode/Extension child element shall provide a specific extension point for use cases that require elements not provided in the basic structure.
        /// </summary>
        [XmlElementAttribute(Order = 2)]
        public Extension Extension
        {
            get
            {
                return _extension;
            }
            set
            {
                _extension = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(NetworkNode));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NetworkNode object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an NetworkNode object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output NetworkNode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NetworkNode obj, out Exception exception)
        {
            exception = null;
            obj = default(NetworkNode);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NetworkNode obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static NetworkNode Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((NetworkNode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NetworkNode Deserialize(Stream s)
        {
            return ((NetworkNode)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current NetworkNode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an NetworkNode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NetworkNode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NetworkNode obj, out Exception exception)
        {
            exception = null;
            obj = default(NetworkNode);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NetworkNode obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NetworkNode LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of c:NonBlankString
    /// Properties: isRef 0, content simple
    /// Facets: minLength 1, whitespace replace
    /// The NetworkNode/Path child element describes the XPath expression that shall evaluate to a single node. This single node is part of the path.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class NetworkNodePath
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _documentId;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _value;

        private static XmlSerializer serializer;

        /// <summary>
        /// The UUID for the document referenced by the element.
        /// </summary>
        [XmlAttribute]
        public string documentId
        {
            get
            {
                return _documentId;
            }
            set
            {
                _documentId = value;
            }
        }

        [XmlTextAttribute]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(NetworkNodePath));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NetworkNodePath object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an NetworkNodePath object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output NetworkNodePath object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NetworkNodePath obj, out Exception exception)
        {
            exception = null;
            obj = default(NetworkNodePath);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NetworkNodePath obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static NetworkNodePath Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((NetworkNodePath)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NetworkNodePath Deserialize(Stream s)
        {
            return ((NetworkNodePath)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current NetworkNodePath object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an NetworkNodePath object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NetworkNodePath object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NetworkNodePath obj, out Exception exception)
        {
            exception = null;
            obj = default(NetworkNodePath);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NetworkNodePath obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NetworkNodePath LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The Network complex type shall be the base type for XML schema elements intended to document properties of how various hardware entities are connected.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Network
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<NetworkNode> _node;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Extension _extension;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _baseIndex;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _count;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _incrementBy;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _replacementCharacter;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:NetworkNode
        /// Properties: isRef 0, content complex
        /// The Network/Node child element shall identify the properties of the network node to which the hardware item is connected.
        /// </summary>
        [XmlElementAttribute("Node", Order = 0)]
        public List<NetworkNode> Node
        {
            get
            {
                return _node;
            }
            set
            {
                _node = value;
            }
        }

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The Network/Description child element shall provide a description of the network connection.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// Base type: c:Extension
        /// Properties: isRef 0, content complex
        /// The Network/Extension child element shall provide a specific extension point for use cases that require elements not provided in the basic structure.
        /// </summary>
        [XmlElementAttribute(Order = 2)]
        public Extension Extension
        {
            get
            {
                return _extension;
            }
            set
            {
                _extension = value;
            }
        }

        [XmlAttribute]
        public int baseIndex
        {
            get
            {
                if (_baseIndex.HasValue)
                {
                    return _baseIndex.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _baseIndex = value;
            }
        }

        [XmlIgnore]
        public bool baseIndexSpecified
        {
            get
            {
                return _baseIndex.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _baseIndex = null;
                }
            }
        }

        [XmlAttribute]
        public int count
        {
            get
            {
                if (_count.HasValue)
                {
                    return _count.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _count = value;
            }
        }

        [XmlIgnore]
        public bool countSpecified
        {
            get
            {
                return _count.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _count = null;
                }
            }
        }

        [XmlAttribute]
        public int incrementBy
        {
            get
            {
                if (_incrementBy.HasValue)
                {
                    return _incrementBy.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _incrementBy = value;
            }
        }

        [XmlIgnore]
        public bool incrementBySpecified
        {
            get
            {
                return _incrementBy.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _incrementBy = null;
                }
            }
        }

        [XmlAttribute]
        public string replacementCharacter
        {
            get
            {
                return _replacementCharacter;
            }
            set
            {
                _replacementCharacter = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Network));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Node should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNode()
        {
            return Node != null && Node.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Network object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Network object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Network object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Network obj, out Exception exception)
        {
            exception = null;
            obj = default(Network);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Network obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Network Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Network)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Network Deserialize(Stream s)
        {
            return ((Network)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Network object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Network object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Network object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Network obj, out Exception exception)
        {
            exception = null;
            obj = default(Network);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Network obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Network LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The PhysicalCharacteristics complex type shall be the base type for XML schema elements intended to document the physical characteristics of a hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class PhysicalCharacteristics
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private @double _mass;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private @double _volume;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private PhysicalCharacteristicsLinearMeasurements _linearMeasurements;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<NamedValue> _other;

        private static XmlSerializer serializer;

        public @double Mass
        {
            get
            {
                return _mass;
            }
            set
            {
                _mass = value;
            }
        }

        public @double Volume
        {
            get
            {
                return _volume;
            }
            set
            {
                _volume = value;
            }
        }

        public PhysicalCharacteristicsLinearMeasurements LinearMeasurements
        {
            get
            {
                return _linearMeasurements;
            }
            set
            {
                _linearMeasurements = value;
            }
        }

        [XmlArrayItemAttribute("Value", IsNullable = false)]
        public List<NamedValue> Other
        {
            get
            {
                return _other;
            }
            set
            {
                _other = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(PhysicalCharacteristics));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Other should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOther()
        {
            return Other != null && Other.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PhysicalCharacteristics object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PhysicalCharacteristics object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PhysicalCharacteristics object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PhysicalCharacteristics obj, out Exception exception)
        {
            exception = null;
            obj = default(PhysicalCharacteristics);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PhysicalCharacteristics obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static PhysicalCharacteristics Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((PhysicalCharacteristics)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PhysicalCharacteristics Deserialize(Stream s)
        {
            return ((PhysicalCharacteristics)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PhysicalCharacteristics object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PhysicalCharacteristics object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PhysicalCharacteristics object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PhysicalCharacteristics obj, out Exception exception)
        {
            exception = null;
            obj = default(PhysicalCharacteristics);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PhysicalCharacteristics obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PhysicalCharacteristics LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class PhysicalCharacteristicsLinearMeasurements
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private @double _height;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private @double _width;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private @double _depth;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private PhysicalCharacteristicsLinearMeasurementsRackUSize _rackUSize;

        private static XmlSerializer serializer;

        public @double Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }

        public @double Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }

        public @double Depth
        {
            get
            {
                return _depth;
            }
            set
            {
                _depth = value;
            }
        }

        public PhysicalCharacteristicsLinearMeasurementsRackUSize RackUSize
        {
            get
            {
                return _rackUSize;
            }
            set
            {
                _rackUSize = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(PhysicalCharacteristicsLinearMeasurements));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PhysicalCharacteristicsLinearMeasurements object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PhysicalCharacteristicsLinearMeasurements object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PhysicalCharacteristicsLinearMeasurements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PhysicalCharacteristicsLinearMeasurements obj, out Exception exception)
        {
            exception = null;
            obj = default(PhysicalCharacteristicsLinearMeasurements);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PhysicalCharacteristicsLinearMeasurements obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static PhysicalCharacteristicsLinearMeasurements Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((PhysicalCharacteristicsLinearMeasurements)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PhysicalCharacteristicsLinearMeasurements Deserialize(Stream s)
        {
            return ((PhysicalCharacteristicsLinearMeasurements)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PhysicalCharacteristicsLinearMeasurements object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PhysicalCharacteristicsLinearMeasurements object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PhysicalCharacteristicsLinearMeasurements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PhysicalCharacteristicsLinearMeasurements obj, out Exception exception)
        {
            exception = null;
            obj = default(PhysicalCharacteristicsLinearMeasurements);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PhysicalCharacteristicsLinearMeasurements obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PhysicalCharacteristicsLinearMeasurements LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class PhysicalCharacteristicsLinearMeasurementsRackUSize
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private double _value;

        private static XmlSerializer serializer;

        [XmlAttribute]
        public double value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(PhysicalCharacteristicsLinearMeasurementsRackUSize));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PhysicalCharacteristicsLinearMeasurementsRackUSize object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PhysicalCharacteristicsLinearMeasurementsRackUSize object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PhysicalCharacteristicsLinearMeasurementsRackUSize object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PhysicalCharacteristicsLinearMeasurementsRackUSize obj, out Exception exception)
        {
            exception = null;
            obj = default(PhysicalCharacteristicsLinearMeasurementsRackUSize);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PhysicalCharacteristicsLinearMeasurementsRackUSize obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static PhysicalCharacteristicsLinearMeasurementsRackUSize Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((PhysicalCharacteristicsLinearMeasurementsRackUSize)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PhysicalCharacteristicsLinearMeasurementsRackUSize Deserialize(Stream s)
        {
            return ((PhysicalCharacteristicsLinearMeasurementsRackUSize)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PhysicalCharacteristicsLinearMeasurementsRackUSize object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PhysicalCharacteristicsLinearMeasurementsRackUSize object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PhysicalCharacteristicsLinearMeasurementsRackUSize object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PhysicalCharacteristicsLinearMeasurementsRackUSize obj, out Exception exception)
        {
            exception = null;
            obj = default(PhysicalCharacteristicsLinearMeasurementsRackUSize);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PhysicalCharacteristicsLinearMeasurementsRackUSize obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PhysicalCharacteristicsLinearMeasurementsRackUSize LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The OperationalRequirements complex type shall be the base type for XML schema elements intended to document the operational requirements that must be satisfied in order for proper operation of the hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class OperationalRequirements
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<NamedValue> _operationalRequirement;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _warmUpTime;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:NamedValue
        /// Properties: isRef 0, content complex
        /// The OperationalRequirements/OperationalRequirement child element shall textually describe an operational requirement of the hardware item.
        /// </summary>
        [XmlElementAttribute("OperationalRequirement", Order = 0)]
        public List<NamedValue> OperationalRequirement
        {
            get
            {
                return _operationalRequirement;
            }
            set
            {
                _operationalRequirement = value;
            }
        }

        /// <summary>
        /// The warm-up time of the hardware item.
        /// </summary>
        [XmlAttributeAttribute(DataType = "duration")]
        public string warmUpTime
        {
            get
            {
                return _warmUpTime;
            }
            set
            {
                _warmUpTime = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(OperationalRequirements));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether OperationalRequirement should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOperationalRequirement()
        {
            return OperationalRequirement != null && OperationalRequirement.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OperationalRequirements object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an OperationalRequirements object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OperationalRequirements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OperationalRequirements obj, out Exception exception)
        {
            exception = null;
            obj = default(OperationalRequirements);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OperationalRequirements obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static OperationalRequirements Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((OperationalRequirements)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OperationalRequirements Deserialize(Stream s)
        {
            return ((OperationalRequirements)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OperationalRequirements object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OperationalRequirements object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OperationalRequirements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OperationalRequirements obj, out Exception exception)
        {
            exception = null;
            obj = default(OperationalRequirements);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OperationalRequirements obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static OperationalRequirements LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: abstract true
    /// The ControlLanguage complex type shall be the base type for XML schema elements intended to document control languages. Derived types include standard commands for programmable instrumentation (SCPI), message based, and register based.
    /// </summary>
    [XmlIncludeAttribute(typeof(Generic))]
    [XmlIncludeAttribute(typeof(Register))]
    [XmlIncludeAttribute(typeof(SCPI))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public abstract partial class ControlLanguage
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Document _documentation;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:Document
        /// Properties: isRef 0, content complex
        /// The ControlLanguage/Documentation child element shall document control languages.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public Document Documentation
        {
            get
            {
                return _documentation;
            }
            set
            {
                _documentation = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(ControlLanguage));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ControlLanguage object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ControlLanguage object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ControlLanguage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ControlLanguage obj, out Exception exception)
        {
            exception = null;
            obj = default(ControlLanguage);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ControlLanguage obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static ControlLanguage Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ControlLanguage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ControlLanguage Deserialize(Stream s)
        {
            return ((ControlLanguage)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ControlLanguage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ControlLanguage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ControlLanguage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ControlLanguage obj, out Exception exception)
        {
            exception = null;
            obj = default(ControlLanguage);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ControlLanguage obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ControlLanguage LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:ControlLanguage
    /// Properties: base hc:ControlLanguage
    /// The Generic complex type shall be the base type for XML schema elements intended to identify the document that contains the instrument’s generic control language specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Generic : ControlLanguage
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Generic));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Generic object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Generic object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Generic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Generic obj, out Exception exception)
        {
            exception = null;
            obj = default(Generic);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Generic obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static Generic Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Generic)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Generic Deserialize(Stream s)
        {
            return ((Generic)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Generic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Generic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Generic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Generic obj, out Exception exception)
        {
            exception = null;
            obj = default(Generic);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Generic obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static Generic LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:ControlLanguage
    /// Properties: base hc:ControlLanguage
    /// The Register complex type shall be the base type for XML schema child elements intended to identify the document that contains the instrument’s register commands.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Register : ControlLanguage
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Register));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Register object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Register object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Register object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Register obj, out Exception exception)
        {
            exception = null;
            obj = default(Register);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Register obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static Register Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Register)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Register Deserialize(Stream s)
        {
            return ((Register)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Register object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Register object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Register object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Register obj, out Exception exception)
        {
            exception = null;
            obj = default(Register);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Register obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static Register LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:ControlLanguage
    /// Properties: base hc:ControlLanguage
    /// The SCPI complex type shall be the base type for XML schema elements intended to identify the document that contains the instrument’s SCPI commands.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class SCPI : ControlLanguage
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(SCPI));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SCPI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SCPI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SCPI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SCPI obj, out Exception exception)
        {
            exception = null;
            obj = default(SCPI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SCPI obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static SCPI Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((SCPI)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SCPI Deserialize(Stream s)
        {
            return ((SCPI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SCPI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SCPI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SCPI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SCPI obj, out Exception exception)
        {
            exception = null;
            obj = default(SCPI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SCPI obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SCPI LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The DriverModule complex type shall be the base type for XML schema elements intended to identify instrument driver executables. For example, all forms of interchangeable virtual instrumentation (IVI) drivers are software executables.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class DriverModule
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _fileName;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _installationDirectory;

        private static XmlSerializer serializer;

        /// <summary>
        /// A descriptive or common computer-based name for the driver.
        /// </summary>
        [XmlAttribute]
        public string fileName
        {
            get
            {
                return _fileName;
            }
            set
            {
                _fileName = value;
            }
        }

        /// <summary>
        /// A descriptive or common computer-based path to the directory where the driver is installed.
        /// </summary>
        [XmlAttribute]
        public string installationDirectory
        {
            get
            {
                return _installationDirectory;
            }
            set
            {
                _installationDirectory = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(DriverModule));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DriverModule object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DriverModule object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DriverModule object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DriverModule obj, out Exception exception)
        {
            exception = null;
            obj = default(DriverModule);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DriverModule obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static DriverModule Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DriverModule)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DriverModule Deserialize(Stream s)
        {
            return ((DriverModule)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DriverModule object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DriverModule object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DriverModule object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DriverModule obj, out Exception exception)
        {
            exception = null;
            obj = default(DriverModule);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DriverModule obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DriverModule LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: abstract true
    /// The Driver complex type shall be the base type for XML schema elements intended to document instrument drivers.
    /// </summary>
    [XmlIncludeAttribute(typeof(IVI))]
    [XmlIncludeAttribute(typeof(IVINET))]
    [XmlIncludeAttribute(typeof(IVICOM))]
    [XmlIncludeAttribute(typeof(IVIC))]
    [XmlIncludeAttribute(typeof(VPP))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public abstract partial class Driver
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object _item;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private DriverItemChoiceType _itemElementName;

        private static XmlSerializer serializer;

        [XmlElementAttribute("Bit16", typeof(DriverModule), Order = 0)]
        [XmlElementAttribute("Bit32", typeof(DriverModule), Order = 0)]
        [XmlElementAttribute("Bit64", typeof(DriverModule), Order = 0)]
        [XmlElementAttribute("Unified", typeof(DriverUnified), Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public object Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [XmlElementAttribute(Order = 1)]
        [XmlIgnore]
        public DriverItemChoiceType ItemElementName
        {
            get
            {
                return _itemElementName;
            }
            set
            {
                _itemElementName = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Driver));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Driver object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Driver object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Driver object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Driver obj, out Exception exception)
        {
            exception = null;
            obj = default(Driver);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Driver obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Driver Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Driver)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Driver Deserialize(Stream s)
        {
            return ((Driver)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Driver object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Driver object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Driver object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Driver obj, out Exception exception)
        {
            exception = null;
            obj = default(Driver);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Driver obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Driver LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The Driver/Unified child element shall identify the unified instrument driver (e.g., a driver that can function as either a 32-bit or a 64-bit driver).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class DriverUnified
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private DriverModule _bit32;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private DriverModule _bit64;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:DriverModule
        /// Properties: isRef 0, content complex
        /// The Driver/Unified/Bit32 child element shall identify the unified 32-bit instrument driver.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public DriverModule Bit32
        {
            get
            {
                return _bit32;
            }
            set
            {
                _bit32 = value;
            }
        }

        /// <summary>
        /// Base type: hc:DriverModule
        /// Properties: isRef 0, content complex
        /// The Driver/Unified/Bit64 child element shall identify the unified 64-bit instrument driver.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public DriverModule Bit64
        {
            get
            {
                return _bit64;
            }
            set
            {
                _bit64 = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(DriverUnified));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DriverUnified object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DriverUnified object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DriverUnified object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DriverUnified obj, out Exception exception)
        {
            exception = null;
            obj = default(DriverUnified);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DriverUnified obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static DriverUnified Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DriverUnified)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DriverUnified Deserialize(Stream s)
        {
            return ((DriverUnified)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DriverUnified object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DriverUnified object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DriverUnified object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DriverUnified obj, out Exception exception)
        {
            exception = null;
            obj = default(DriverUnified);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DriverUnified obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DriverUnified LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IncludeInSchema = false)]
    public enum DriverItemChoiceType
    {

        /// <remarks/>  
        Bit16,

        /// <remarks/>
        Bit32,

        /// <remarks/>
        Bit64,

        /// <remarks/>
        Unified,
    }

    /// <summary>
    /// Base type: Extension of hc:Driver
    /// Properties: base hc:Driver, abstract true
    /// The IVI complex type shall be the base type for XML schema elements intended to document properties of an interchangeable virtual instrumentation (IVI) driver.
    /// </summary>
    [XmlIncludeAttribute(typeof(IVINET))]
    [XmlIncludeAttribute(typeof(IVICOM))]
    [XmlIncludeAttribute(typeof(IVIC))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public abstract partial class IVI : Driver
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> _class;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Document _complianceDocument;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The IVI/Class child element shall identify the IVI class (or classes) provided by the IVI driver.
        /// </summary>
        [XmlElementAttribute("Class", Order = 0)]
        public List<string> Class
        {
            get
            {
                return _class;
            }
            set
            {
                _class = value;
            }
        }

        /// <summary>
        /// Base type: c:Document
        /// Properties: isRef 0, content complex
        /// The IVI/ComplianceDocument child element shall identify the IVI compliance document.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public Document ComplianceDocument
        {
            get
            {
                return _complianceDocument;
            }
            set
            {
                _complianceDocument = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(IVI));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Class should be serialized
        /// </summary>
        public virtual bool ShouldSerializeClass()
        {
            return Class != null && Class.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IVI object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IVI object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output IVI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out IVI obj, out Exception exception)
        {
            exception = null;
            obj = default(IVI);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out IVI obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static IVI Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((IVI)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static IVI Deserialize(Stream s)
        {
            return ((IVI)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current IVI object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IVI object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IVI object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IVI obj, out Exception exception)
        {
            exception = null;
            obj = default(IVI);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IVI obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static IVI LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(TypeName = "IVI.NET", Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class IVINET : IVI
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _assemblyQualifiedClassName;

        private static XmlSerializer serializer;

        [XmlAttribute]
        public string assemblyQualifiedClassName
        {
            get
            {
                return _assemblyQualifiedClassName;
            }
            set
            {
                _assemblyQualifiedClassName = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(IVINET));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IVINET object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IVINET object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output IVINET object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out IVINET obj, out Exception exception)
        {
            exception = null;
            obj = default(IVINET);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out IVINET obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static IVINET Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((IVINET)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static IVINET Deserialize(Stream s)
        {
            return ((IVINET)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current IVINET object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IVINET object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IVINET object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IVINET obj, out Exception exception)
        {
            exception = null;
            obj = default(IVINET);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IVINET obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static IVINET LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(TypeName = "IVI-COM", Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class IVICOM : IVI
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _progID;

        private static XmlSerializer serializer;

        [XmlAttribute]
        public string progID
        {
            get
            {
                return _progID;
            }
            set
            {
                _progID = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(IVICOM));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IVICOM object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IVICOM object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output IVICOM object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out IVICOM obj, out Exception exception)
        {
            exception = null;
            obj = default(IVICOM);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out IVICOM obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static IVICOM Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((IVICOM)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static IVICOM Deserialize(Stream s)
        {
            return ((IVICOM)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current IVICOM object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IVICOM object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IVICOM object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IVICOM obj, out Exception exception)
        {
            exception = null;
            obj = default(IVICOM);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IVICOM obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static IVICOM LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(TypeName = "IVI-C", Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class IVIC : IVI
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _prefix;

        private static XmlSerializer serializer;

        [XmlAttribute]
        public string prefix
        {
            get
            {
                return _prefix;
            }
            set
            {
                _prefix = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(IVIC));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IVIC object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an IVIC object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output IVIC object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out IVIC obj, out Exception exception)
        {
            exception = null;
            obj = default(IVIC);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out IVIC obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static IVIC Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((IVIC)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static IVIC Deserialize(Stream s)
        {
            return ((IVIC)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current IVIC object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IVIC object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IVIC object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IVIC obj, out Exception exception)
        {
            exception = null;
            obj = default(IVIC);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IVIC obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static IVIC LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:Driver
    /// Properties: base hc:Driver
    /// The VPP complex type shall be the base type for XML schema elements intended to document properties of a VMEbus extensions for instrumentation (VXI) plug and play (VPP) driver.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class VPP : Driver
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _prefix;

        private static XmlSerializer serializer;

        /// <summary>
        /// The prefix to be used for all API functions in the VPP driver.
        /// </summary>
        [XmlAttribute]
        public string prefix
        {
            get
            {
                return _prefix;
            }
            set
            {
                _prefix = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(VPP));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VPP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an VPP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output VPP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out VPP obj, out Exception exception)
        {
            exception = null;
            obj = default(VPP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out VPP obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static VPP Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((VPP)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static VPP Deserialize(Stream s)
        {
            return ((VPP)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current VPP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an VPP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VPP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VPP obj, out Exception exception)
        {
            exception = null;
            obj = default(VPP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out VPP obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static VPP LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The VersionIdentifier complex type shall be the base type for XML schema elements intended to document versions of software, firmware, or operating system supported by the entity. This information shall be either the minimum or maximum version number.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class VersionIdentifier
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _version;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private VersionIdentifierQualifier _qualifier;

        private static XmlSerializer serializer;

        /// <summary>
        /// A descriptive or common name for the version.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        /// <summary>
        /// An identification of the version number.
        /// </summary>
        [XmlAttribute]
        public string version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }

        /// <summary>
        /// An indication of whether the version specified is the minimum or maximum.
        /// </summary>
        [XmlAttribute]
        public VersionIdentifierQualifier qualifier
        {
            get
            {
                return _qualifier;
            }
            set
            {
                _qualifier = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(VersionIdentifier));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VersionIdentifier object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an VersionIdentifier object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output VersionIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out VersionIdentifier obj, out Exception exception)
        {
            exception = null;
            obj = default(VersionIdentifier);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out VersionIdentifier obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static VersionIdentifier Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((VersionIdentifier)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static VersionIdentifier Deserialize(Stream s)
        {
            return ((VersionIdentifier)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current VersionIdentifier object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an VersionIdentifier object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VersionIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VersionIdentifier obj, out Exception exception)
        {
            exception = null;
            obj = default(VersionIdentifier);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out VersionIdentifier obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static VersionIdentifier LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public enum VersionIdentifierQualifier
    {

        Min,

        Max,
    }

    /// <summary>
    /// Base type: Extension of c:ItemDescriptionReference
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Components/Component child element shall identify a subassembly of the subject hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionComponent : ItemDescriptionReference
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _id;

        private static XmlSerializer serializer;

        /// <summary>
        /// A user-defined string uniquely identifying the subassembly. Example: Pre-Amp A1.
        /// </summary>
        [XmlAttribute]
        public string ID
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionComponent));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionComponent object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionComponent object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionComponent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionComponent obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionComponent);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionComponent obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static HardwareItemDescriptionComponent Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionComponent)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionComponent Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionComponent)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionComponent object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionComponent object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionComponent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionComponent obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionComponent);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionComponent obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static HardwareItemDescriptionComponent LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionComponent1 : ItemDescriptionReference
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _id;

        private static XmlSerializer serializer;

        /// <summary>
        /// A user-defined string uniquely identifying the subassembly. Example: Pre-Amp A1.
        /// </summary>
        [XmlAttribute]
        public string ID
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionComponent1));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionComponent1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionComponent1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionComponent1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionComponent1 obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionComponent1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionComponent1 obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static HardwareItemDescriptionComponent1 Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionComponent1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionComponent1 Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionComponent1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionComponent1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionComponent1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionComponent1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionComponent1 obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionComponent1);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionComponent1 obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static HardwareItemDescriptionComponent1 LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Control child element shall be a collector element of control languages, drivers, extension, firmwares, and tools for the hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionControl
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<VersionIdentifier> _firmwares;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<HardwareItemDescriptionControlDriver> _drivers;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<ControlLanguage> _controlLanguages;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<HardwareItemDescriptionControlTool> _tools;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Extension _extension;

        private static XmlSerializer serializer;

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Firmwares child element shall identify the firmware(s) of the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 0)]
        [XmlArrayItemAttribute("Firmware", IsNullable = false)]
        public List<VersionIdentifier> Firmwares
        {
            get
            {
                return _firmwares;
            }
            set
            {
                _firmwares = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers child element shall identify the software interface driver(s) of the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute("Driver", IsNullable = false)]
        public List<HardwareItemDescriptionControlDriver> Drivers
        {
            get
            {
                return _drivers;
            }
            set
            {
                _drivers = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/ControlLanguages child element shall identify the control language(s) of the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 2)]
        [XmlArrayItemAttribute(IsNullable = false)]
        public List<ControlLanguage> ControlLanguages
        {
            get
            {
                return _controlLanguages;
            }
            set
            {
                _controlLanguages = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Tools child element shall identify all software tools associated with the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 3)]
        [XmlArrayItemAttribute("Tool", IsNullable = false)]
        public List<HardwareItemDescriptionControlTool> Tools
        {
            get
            {
                return _tools;
            }
            set
            {
                _tools = value;
            }
        }

        /// <summary>
        /// Base type: c:Extension
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Extension child element shall provide a specific extension point for use cases that require elements not provided in the basic structure.
        /// </summary>
        [XmlElementAttribute(Order = 4)]
        public Extension Extension
        {
            get
            {
                return _extension;
            }
            set
            {
                _extension = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionControl));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Firmwares should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFirmwares()
        {
            return Firmwares != null && Firmwares.Count > 0;
        }

        /// <summary>
        /// Test whether Drivers should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDrivers()
        {
            return Drivers != null && Drivers.Count > 0;
        }

        /// <summary>
        /// Test whether ControlLanguages should be serialized
        /// </summary>
        public virtual bool ShouldSerializeControlLanguages()
        {
            return ControlLanguages != null && ControlLanguages.Count > 0;
        }

        /// <summary>
        /// Test whether Tools should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTools()
        {
            return Tools != null && Tools.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionControl object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionControl object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControl object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionControl obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControl);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionControl obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static HardwareItemDescriptionControl Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionControl)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionControl Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionControl)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionControl object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionControl object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControl object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControl obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControl);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControl obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HardwareItemDescriptionControl LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:VersionIdentifier
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Control/Drivers/Driver child element shall identify the software interface driver for the hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionControlDriver : VersionIdentifier
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Driver _type;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ManufacturerData _manufacturer;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ControlDriverDependencies _dependencies;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private HardwareItemDescriptionControlDriverPlatform _platform;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Extension _extension;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:Driver
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Type child element shall identify the name and location of the driver.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public Driver Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }

        /// <summary>
        /// Base type: c:ManufacturerData
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Manufacturer child element shall identify the developer of the driver.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public ManufacturerData Manufacturer
        {
            get
            {
                return _manufacturer;
            }
            set
            {
                _manufacturer = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Dependencies child element shall identify software and/or firmware dependencies.
        /// </summary>
        [XmlElementAttribute(Order = 2)]
        public ControlDriverDependencies Dependencies
        {
            get
            {
                return _dependencies;
            }
            set
            {
                _dependencies = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Platform child element shall identify computing hardware requirements needed in order for the driver to execute.
        /// </summary>
        [XmlElementAttribute(Order = 3)]
        public HardwareItemDescriptionControlDriverPlatform Platform
        {
            get
            {
                return _platform;
            }
            set
            {
                _platform = value;
            }
        }

        /// <summary>
        /// Base type: c:Extension
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Extension child element shall provide a specific extension point for use cases that require elements not provided in the basic structure.
        /// </summary>
        [XmlElementAttribute(Order = 4)]
        public Extension Extension
        {
            get
            {
                return _extension;
            }
            set
            {
                _extension = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionControlDriver));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionControlDriver object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionControlDriver object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlDriver object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionControlDriver obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlDriver);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionControlDriver obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static HardwareItemDescriptionControlDriver Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionControlDriver)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionControlDriver Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionControlDriver)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionControlDriver object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionControlDriver object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlDriver object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlDriver obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlDriver);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlDriver obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static HardwareItemDescriptionControlDriver LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Control/Drivers/Driver/Dependencies child element shall identify software and/or firmware dependencies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class ControlDriverDependencies
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<VersionIdentifier> _firmware;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<VersionIdentifier> _software;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:VersionIdentifier
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Dependencies/Firmware child element shall identify the firmware dependency.
        /// </summary>
        [XmlElementAttribute("Firmware", Order = 0)]
        public List<VersionIdentifier> Firmware
        {
            get
            {
                return _firmware;
            }
            set
            {
                _firmware = value;
            }
        }

        /// <summary>
        /// Base type: hc:VersionIdentifier
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Dependencies/Software child element shall identify the software dependency.
        /// </summary>
        [XmlElementAttribute("Software", Order = 1)]
        public List<VersionIdentifier> Software
        {
            get
            {
                return _software;
            }
            set
            {
                _software = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(ControlDriverDependencies));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Firmware should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFirmware()
        {
            return Firmware != null && Firmware.Count > 0;
        }

        /// <summary>
        /// Test whether Software should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSoftware()
        {
            return Software != null && Software.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ControlDriverDependencies object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ControlDriverDependencies object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ControlDriverDependencies object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ControlDriverDependencies obj, out Exception exception)
        {
            exception = null;
            obj = default(ControlDriverDependencies);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ControlDriverDependencies obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static ControlDriverDependencies Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ControlDriverDependencies)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ControlDriverDependencies Deserialize(Stream s)
        {
            return ((ControlDriverDependencies)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ControlDriverDependencies object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ControlDriverDependencies object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ControlDriverDependencies object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ControlDriverDependencies obj, out Exception exception)
        {
            exception = null;
            obj = default(ControlDriverDependencies);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ControlDriverDependencies obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ControlDriverDependencies LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Control/Drivers/Driver/Platform child element shall identify computing hardware requirements needed in order for the driver to execute.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionControlDriverPlatform
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<DriverPlatformOperatingSystem> _operatingSystem;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private DriverPlatformProcessor _processor;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private HardwareItemDescriptionControlDriverPlatformPhysicalMemory _physicalMemory;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private HardwareItemDescriptionControlDriverPlatformHardDisk _hardDisk;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: Extension of hc:VersionIdentifier
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Platform/OperatingSystem child element shall identify computer operating system requirements needed in order for the driver to execute.
        /// </summary>
        [XmlElementAttribute("OperatingSystem", Order = 0)]
        public List<DriverPlatformOperatingSystem> OperatingSystem
        {
            get
            {
                return _operatingSystem;
            }
            set
            {
                _operatingSystem = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Platform/Processor child element shall identify computer processor speed requirements needed in order for the driver to execute.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public DriverPlatformProcessor Processor
        {
            get
            {
                return _processor;
            }
            set
            {
                _processor = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Platform/PhysicalMemory child element shall identify computer physical memory requirements needed in order for the driver to execute.
        /// </summary>
        [XmlElementAttribute(Order = 2)]
        public HardwareItemDescriptionControlDriverPlatformPhysicalMemory PhysicalMemory
        {
            get
            {
                return _physicalMemory;
            }
            set
            {
                _physicalMemory = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Drivers/Driver/Platform/HardDisk child element shall identify computer hard disk requirements needed in order for the driver to be stored and to execute.
        /// </summary>
        [XmlElementAttribute(Order = 3)]
        public HardwareItemDescriptionControlDriverPlatformHardDisk HardDisk
        {
            get
            {
                return _hardDisk;
            }
            set
            {
                _hardDisk = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionControlDriverPlatform));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether OperatingSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOperatingSystem()
        {
            return OperatingSystem != null && OperatingSystem.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionControlDriverPlatform object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionControlDriverPlatform object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlDriverPlatform object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionControlDriverPlatform obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlDriverPlatform);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionControlDriverPlatform obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static HardwareItemDescriptionControlDriverPlatform Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionControlDriverPlatform)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionControlDriverPlatform Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionControlDriverPlatform)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionControlDriverPlatform object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionControlDriverPlatform object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlDriverPlatform object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlDriverPlatform obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlDriverPlatform);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlDriverPlatform obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HardwareItemDescriptionControlDriverPlatform LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:VersionIdentifier
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Control/Drivers/Driver/Platform/OperatingSystem child element shall identify computer operating system requirements needed in order for the driver to execute.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class DriverPlatformOperatingSystem : VersionIdentifier
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _servicePack;

        private static XmlSerializer serializer;

        /// <summary>
        /// The operating system’s service pack identification. Example: Service Pack 1.1.
        /// </summary>
        [XmlAttribute]
        public string servicePack
        {
            get
            {
                return _servicePack;
            }
            set
            {
                _servicePack = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(DriverPlatformOperatingSystem));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DriverPlatformOperatingSystem object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DriverPlatformOperatingSystem object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DriverPlatformOperatingSystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DriverPlatformOperatingSystem obj, out Exception exception)
        {
            exception = null;
            obj = default(DriverPlatformOperatingSystem);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DriverPlatformOperatingSystem obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static DriverPlatformOperatingSystem Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DriverPlatformOperatingSystem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DriverPlatformOperatingSystem Deserialize(Stream s)
        {
            return ((DriverPlatformOperatingSystem)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DriverPlatformOperatingSystem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DriverPlatformOperatingSystem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DriverPlatformOperatingSystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DriverPlatformOperatingSystem obj, out Exception exception)
        {
            exception = null;
            obj = default(DriverPlatformOperatingSystem);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DriverPlatformOperatingSystem obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static DriverPlatformOperatingSystem LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Control/Drivers/Driver/Platform/Processor child element shall identify computer processor speed requirements needed in order for the driver to execute.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class DriverPlatformProcessor
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _speed;

        private static XmlSerializer serializer;

        /// <summary>
        /// The minimum clock speed of the processor required for the software driver to execute. Example: 10 GHz or greater Acme-3 processor.
        /// </summary>
        [XmlAttribute]
        public string speed
        {
            get
            {
                return _speed;
            }
            set
            {
                _speed = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(DriverPlatformProcessor));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DriverPlatformProcessor object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DriverPlatformProcessor object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DriverPlatformProcessor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DriverPlatformProcessor obj, out Exception exception)
        {
            exception = null;
            obj = default(DriverPlatformProcessor);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DriverPlatformProcessor obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static DriverPlatformProcessor Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DriverPlatformProcessor)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DriverPlatformProcessor Deserialize(Stream s)
        {
            return ((DriverPlatformProcessor)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DriverPlatformProcessor object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DriverPlatformProcessor object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DriverPlatformProcessor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DriverPlatformProcessor obj, out Exception exception)
        {
            exception = null;
            obj = default(DriverPlatformProcessor);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DriverPlatformProcessor obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DriverPlatformProcessor LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Control/Drivers/Driver/Platform/PhysicalMemory child element shall identify computer physical memory requirements needed in order for the driver to execute.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionControlDriverPlatformPhysicalMemory
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _minimum;

        private static XmlSerializer serializer;

        /// <summary>
        /// The minimum physical memory capacity needed for the software driver to execute. Example: 512 MB.
        /// </summary>
        [XmlAttribute]
        public string minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionControlDriverPlatformPhysicalMemory));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionControlDriverPlatformPhysicalMemory object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionControlDriverPlatformPhysicalMemory object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlDriverPlatformPhysicalMemory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionControlDriverPlatformPhysicalMemory obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlDriverPlatformPhysicalMemory);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionControlDriverPlatformPhysicalMemory obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static HardwareItemDescriptionControlDriverPlatformPhysicalMemory Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionControlDriverPlatformPhysicalMemory)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionControlDriverPlatformPhysicalMemory Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionControlDriverPlatformPhysicalMemory)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionControlDriverPlatformPhysicalMemory object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionControlDriverPlatformPhysicalMemory object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlDriverPlatformPhysicalMemory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlDriverPlatformPhysicalMemory obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlDriverPlatformPhysicalMemory);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlDriverPlatformPhysicalMemory obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HardwareItemDescriptionControlDriverPlatformPhysicalMemory LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Control/Drivers/Driver/Platform/HardDisk child element shall identify computer hard disk requirements needed in order for the driver to be stored and to execute.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionControlDriverPlatformHardDisk
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _minimum;

        private static XmlSerializer serializer;

        /// <summary>
        /// The minimum storage capacity needed to store the software driver and permit its execution. Example: 6 GB.
        /// </summary>
        [XmlAttribute]
        public string minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionControlDriverPlatformHardDisk));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionControlDriverPlatformHardDisk object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionControlDriverPlatformHardDisk object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlDriverPlatformHardDisk object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionControlDriverPlatformHardDisk obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlDriverPlatformHardDisk);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionControlDriverPlatformHardDisk obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static HardwareItemDescriptionControlDriverPlatformHardDisk Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionControlDriverPlatformHardDisk)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionControlDriverPlatformHardDisk Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionControlDriverPlatformHardDisk)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionControlDriverPlatformHardDisk object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionControlDriverPlatformHardDisk object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlDriverPlatformHardDisk object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlDriverPlatformHardDisk obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlDriverPlatformHardDisk);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlDriverPlatformHardDisk obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HardwareItemDescriptionControlDriverPlatformHardDisk LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:VersionIdentifier
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Control/Tools/Tool child element shall identify a software tool associated with the hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionControlTool : VersionIdentifier
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<VersionIdentifier> _dependencies;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _filePath;

        private static XmlSerializer serializer;

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The HardwareItemDescription/Control/Tools/Tool/Dependencies child element shall identify a tool’s software and/or driver dependencies.
        /// </summary>
        [XmlArrayAttribute(Order = 0)]
        [XmlArrayItemAttribute("Driver", typeof(HardwareItemDescriptionControlToolDriver), IsNullable = false)]
        [XmlArrayItemAttribute("Software", typeof(HardwareItemDescriptionControlToolSoftware), IsNullable = false)]
        public List<VersionIdentifier> Dependencies
        {
            get
            {
                return _dependencies;
            }
            set
            {
                _dependencies = value;
            }
        }

        /// <summary>
        /// The location of the software tool, within the operating system structure, on the hard disk.
        /// </summary>
        [XmlAttribute]
        public string filePath
        {
            get
            {
                return _filePath;
            }
            set
            {
                _filePath = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionControlTool));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Dependencies should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDependencies()
        {
            return Dependencies != null && Dependencies.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionControlTool object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionControlTool object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlTool object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionControlTool obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlTool);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionControlTool obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static HardwareItemDescriptionControlTool Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionControlTool)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionControlTool Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionControlTool)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionControlTool object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionControlTool object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlTool object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlTool obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlTool);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlTool obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static HardwareItemDescriptionControlTool LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:VersionIdentifier
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/Control/Tools/Tool/Dependencies/Driver child element shall identify a tool’s driver dependency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionControlToolDriver : VersionIdentifier
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionControlToolDriver));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionControlToolDriver object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionControlToolDriver object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlToolDriver object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionControlToolDriver obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlToolDriver);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionControlToolDriver obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static HardwareItemDescriptionControlToolDriver Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionControlToolDriver)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionControlToolDriver Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionControlToolDriver)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionControlToolDriver object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionControlToolDriver object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlToolDriver object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlToolDriver obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlToolDriver);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlToolDriver obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static HardwareItemDescriptionControlToolDriver LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionControlToolSoftware : VersionIdentifier
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionControlToolSoftware));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionControlToolSoftware object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionControlToolSoftware object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlToolSoftware object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionControlToolSoftware obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlToolSoftware);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionControlToolSoftware obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static HardwareItemDescriptionControlToolSoftware Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionControlToolSoftware)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionControlToolSoftware Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionControlToolSoftware)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionControlToolSoftware object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionControlToolSoftware object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionControlToolSoftware object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlToolSoftware obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionControlToolSoftware);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionControlToolSoftware obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static HardwareItemDescriptionControlToolSoftware LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The HardwareItemDescription/ConfigurationOptions/Option child element shall identify the name of the configuration item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionOption
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;

        private static XmlSerializer serializer;

        /// <summary>
        /// A descriptive or common name for the hardware item value the user can modify, which will persist after a power cycle.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionOption));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionOption object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionOption object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionOption object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionOption obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionOption);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionOption obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static HardwareItemDescriptionOption Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionOption)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionOption Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionOption)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionOption object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionOption object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionOption object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionOption obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionOption);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionOption obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HardwareItemDescriptionOption LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionCalibrationRequirement
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> _supportEquipment;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Document> _procedure;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _frequency;

        private static XmlSerializer serializer;

        [XmlElementAttribute("SupportEquipment", Order = 0)]
        public List<string> SupportEquipment
        {
            get
            {
                return _supportEquipment;
            }
            set
            {
                _supportEquipment = value;
            }
        }

        [XmlElementAttribute("Procedure", Order = 1)]
        public List<Document> Procedure
        {
            get
            {
                return _procedure;
            }
            set
            {
                _procedure = value;
            }
        }

        [XmlAttributeAttribute(DataType = "duration")]
        public string frequency
        {
            get
            {
                return _frequency;
            }
            set
            {
                _frequency = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionCalibrationRequirement));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether SupportEquipment should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSupportEquipment()
        {
            return SupportEquipment != null && SupportEquipment.Count > 0;
        }

        /// <summary>
        /// Test whether Procedure should be serialized
        /// </summary>
        public virtual bool ShouldSerializeProcedure()
        {
            return Procedure != null && Procedure.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionCalibrationRequirement object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionCalibrationRequirement object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionCalibrationRequirement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionCalibrationRequirement obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionCalibrationRequirement);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionCalibrationRequirement obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static HardwareItemDescriptionCalibrationRequirement Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionCalibrationRequirement)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionCalibrationRequirement Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionCalibrationRequirement)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionCalibrationRequirement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionCalibrationRequirement object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionCalibrationRequirement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionCalibrationRequirement obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionCalibrationRequirement);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionCalibrationRequirement obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HardwareItemDescriptionCalibrationRequirement LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The PowerSpecifications/AC child element shall be a collector element of the identification of ac power characteristics for the subject hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class PowerSpecificationsAC
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Limit _frequency;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Limit _voltage;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Limit _item;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private PowerSpecificationsACItemChoiceType2 _itemElementName;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<ConnectorLocation> _connectorPins;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Nullable<double> _phase;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:Limit
        /// Properties: isRef 0, content complex
        /// The PowerSpecifications/AC/Frequency child element shall identify the frequency of the identified phase.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public Limit Frequency
        {
            get
            {
                return _frequency;
            }
            set
            {
                _frequency = value;
            }
        }

        /// <summary>
        /// Base type: c:Limit
        /// Properties: isRef 0, content complex
        /// The PowerSpecifications/AC/Voltage child element shall identify the voltage of the identified phase.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public Limit Voltage
        {
            get
            {
                return _voltage;
            }
            set
            {
                _voltage = value;
            }
        }

        [XmlElementAttribute("Amperage", typeof(Limit), Order = 2)]
        [XmlElementAttribute("PowerDraw", typeof(Limit), Order = 2)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public Limit Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [XmlElementAttribute(Order = 3)]
        [XmlIgnore]
        public PowerSpecificationsACItemChoiceType2 ItemElementName
        {
            get
            {
                return _itemElementName;
            }
            set
            {
                _itemElementName = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The PowerSpecifications/AC/ConnectorPins child element shall identify the ac power connector pins.
        /// </summary>
        [XmlArrayAttribute(Order = 4)]
        [XmlArrayItemAttribute("ConnectorPin", IsNullable = false)]
        public List<ConnectorLocation> ConnectorPins
        {
            get
            {
                return _connectorPins;
            }
            set
            {
                _connectorPins = value;
            }
        }

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The PowerSpecifications/AC/Description child element shall describe the ac power. This description may include such items as three-phase configurations (delta or wye), electromagnetic interference and electromagnetic compatibility (EMI/EMC) characteristics, etc.
        /// </summary>
        [XmlElementAttribute(Order = 5)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// The dimensionless number of phases to the ac power form. The default shall be 1. Example: 3 (indicating a three-phase ac requirement that is either a delta or a wye configuration).
        /// </summary>
        [XmlAttribute]
        public double phase
        {
            get
            {
                if (_phase.HasValue)
                {
                    return _phase.Value;
                }
                else
                {
                    return default(double);
                }
            }
            set
            {
                _phase = value;
            }
        }

        [XmlIgnore]
        public bool phaseSpecified
        {
            get
            {
                return _phase.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _phase = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(PowerSpecificationsAC));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ConnectorPins should be serialized
        /// </summary>
        public virtual bool ShouldSerializeConnectorPins()
        {
            return ConnectorPins != null && ConnectorPins.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PowerSpecificationsAC object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PowerSpecificationsAC object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PowerSpecificationsAC object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PowerSpecificationsAC obj, out Exception exception)
        {
            exception = null;
            obj = default(PowerSpecificationsAC);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PowerSpecificationsAC obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static PowerSpecificationsAC Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((PowerSpecificationsAC)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PowerSpecificationsAC Deserialize(Stream s)
        {
            return ((PowerSpecificationsAC)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PowerSpecificationsAC object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PowerSpecificationsAC object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PowerSpecificationsAC object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PowerSpecificationsAC obj, out Exception exception)
        {
            exception = null;
            obj = default(PowerSpecificationsAC);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PowerSpecificationsAC obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PowerSpecificationsAC LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IncludeInSchema = false)]
    public enum PowerSpecificationsACItemChoiceType2
    {

        /// <remarks/>
        Amperage,

        /// <remarks/>
        PowerDraw,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class PowerSpecificationsDC
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Limit _voltage;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Limit _item;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private PowerSpecificationsDCItemChoiceType3 _itemElementName;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<ConnectorLocation> _connectorPins;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Nullable<double> _polarity;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Nullable<double> _ripple;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:Limit
        /// Properties: isRef 0, content complex
        /// The PowerSpecifications/AC/Voltage child element shall identify the voltage of the identified phase.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public Limit Voltage
        {
            get
            {
                return _voltage;
            }
            set
            {
                _voltage = value;
            }
        }

        [XmlElementAttribute("Amperage", typeof(Limit), Order = 1)]
        [XmlElementAttribute("PowerDraw", typeof(Limit), Order = 1)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public Limit Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        [XmlElementAttribute(Order = 2)]
        [XmlIgnore]
        public PowerSpecificationsDCItemChoiceType3 ItemElementName
        {
            get
            {
                return _itemElementName;
            }
            set
            {
                _itemElementName = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The PowerSpecifications/AC/ConnectorPins child element shall identify the ac power connector pins.
        /// </summary>
        [XmlArrayAttribute(Order = 3)]
        [XmlArrayItemAttribute("ConnectorPin", IsNullable = false)]
        public List<ConnectorLocation> ConnectorPins
        {
            get
            {
                return _connectorPins;
            }
            set
            {
                _connectorPins = value;
            }
        }

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The PowerSpecifications/AC/Description child element shall describe the ac power. This description may include such items as three-phase configurations (delta or wye), electromagnetic interference and electromagnetic compatibility (EMI/EMC) characteristics, etc.
        /// </summary>
        [XmlElementAttribute(Order = 4)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        [XmlAttribute]
        public double polarity
        {
            get
            {
                if (_polarity.HasValue)
                {
                    return _polarity.Value;
                }
                else
                {
                    return default(double);
                }
            }
            set
            {
                _polarity = value;
            }
        }

        [XmlIgnore]
        public bool polaritySpecified
        {
            get
            {
                return _polarity.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _polarity = null;
                }
            }
        }

        [XmlAttribute]
        public double ripple
        {
            get
            {
                if (_ripple.HasValue)
                {
                    return _ripple.Value;
                }
                else
                {
                    return default(double);
                }
            }
            set
            {
                _ripple = value;
            }
        }

        [XmlIgnore]
        public bool rippleSpecified
        {
            get
            {
                return _ripple.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _ripple = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(PowerSpecificationsDC));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ConnectorPins should be serialized
        /// </summary>
        public virtual bool ShouldSerializeConnectorPins()
        {
            return ConnectorPins != null && ConnectorPins.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PowerSpecificationsDC object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PowerSpecificationsDC object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PowerSpecificationsDC object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PowerSpecificationsDC obj, out Exception exception)
        {
            exception = null;
            obj = default(PowerSpecificationsDC);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PowerSpecificationsDC obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static PowerSpecificationsDC Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((PowerSpecificationsDC)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PowerSpecificationsDC Deserialize(Stream s)
        {
            return ((PowerSpecificationsDC)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PowerSpecificationsDC object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PowerSpecificationsDC object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PowerSpecificationsDC object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PowerSpecificationsDC obj, out Exception exception)
        {
            exception = null;
            obj = default(PowerSpecificationsDC);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PowerSpecificationsDC obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PowerSpecificationsDC LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IncludeInSchema = false)]
    public enum PowerSpecificationsDCItemChoiceType3
    {

        /// <remarks/>
        Amperage,

        /// <remarks/>
        PowerDraw,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionError
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _type;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _source;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _id;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The PowerSpecifications/AC/Description child element shall describe the ac power. This description may include such items as three-phase configurations (delta or wye), electromagnetic interference and electromagnetic compatibility (EMI/EMC) characteristics, etc.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        [XmlAttribute]
        public string type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }

        [XmlAttribute]
        public string source
        {
            get
            {
                return _source;
            }
            set
            {
                _source = value;
            }
        }

        [XmlAttribute]
        public string ID
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionError));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionError object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionError object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionError object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionError obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionError);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionError obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static HardwareItemDescriptionError Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionError)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionError Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionError)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionError object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionError object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionError object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionError obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionError);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionError obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HardwareItemDescriptionError LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class HardwareItemDescriptionLegalDocuments
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Document[] _items;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private HardwareItemDescriptionLegalDocumentsItemsChoiceType[] _itemsElementName;

        private static XmlSerializer serializer;

        [XmlElementAttribute("Conformance", typeof(Document), Order = 0)]
        [XmlElementAttribute("Exportability", typeof(Document), Order = 0)]
        [XmlElementAttribute("License", typeof(Document), Order = 0)]
        [XmlElementAttribute("Safety", typeof(Document), Order = 0)]
        [XmlElementAttribute("Warranty", typeof(Document), Order = 0)]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public Document[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        [XmlElementAttribute("ItemsElementName", Order = 1)]
        [XmlIgnore]
        public HardwareItemDescriptionLegalDocumentsItemsChoiceType[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HardwareItemDescriptionLegalDocuments));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HardwareItemDescriptionLegalDocuments object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HardwareItemDescriptionLegalDocuments object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionLegalDocuments object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HardwareItemDescriptionLegalDocuments obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionLegalDocuments);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HardwareItemDescriptionLegalDocuments obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static HardwareItemDescriptionLegalDocuments Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((HardwareItemDescriptionLegalDocuments)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HardwareItemDescriptionLegalDocuments Deserialize(Stream s)
        {
            return ((HardwareItemDescriptionLegalDocuments)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HardwareItemDescriptionLegalDocuments object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HardwareItemDescriptionLegalDocuments object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HardwareItemDescriptionLegalDocuments object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionLegalDocuments obj, out Exception exception)
        {
            exception = null;
            obj = default(HardwareItemDescriptionLegalDocuments);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HardwareItemDescriptionLegalDocuments obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HardwareItemDescriptionLegalDocuments LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IncludeInSchema = false)]
    public enum HardwareItemDescriptionLegalDocumentsItemsChoiceType
    {

        /// <remarks/>
        Conformance,

        /// <remarks/>
        Exportability,

        /// <remarks/>
        License,

        /// <remarks/>
        Safety,

        /// <remarks/>
        Warranty,
    }

    /// <summary>
    /// Base type: Extension of hc:Item
    /// Properties: base hc:Item
    /// The RepeatedItem complex type shall be the base type for XML schema elements intended to document multiple identical items with a single element within an instance document.
    /// </summary>
    [XmlIncludeAttribute(typeof(MatrixPort))]
    [XmlIncludeAttribute(typeof(SwitchPort))]
    [XmlIncludeAttribute(typeof(Switch))]
    [XmlIncludeAttribute(typeof(Resource))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public partial class RepeatedItem : Item
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _baseIndex;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _count;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _incrementBy;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _replacementCharacter;

        private static XmlSerializer serializer;

        [XmlAttribute]
        public int baseIndex
        {
            get
            {
                if (_baseIndex.HasValue)
                {
                    return _baseIndex.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _baseIndex = value;
            }
        }

        [XmlIgnore]
        public bool baseIndexSpecified
        {
            get
            {
                return _baseIndex.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _baseIndex = null;
                }
            }
        }

        [XmlAttribute]
        public int count
        {
            get
            {
                if (_count.HasValue)
                {
                    return _count.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _count = value;
            }
        }

        [XmlIgnore]
        public bool countSpecified
        {
            get
            {
                return _count.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _count = null;
                }
            }
        }

        [XmlAttribute]
        public int incrementBy
        {
            get
            {
                if (_incrementBy.HasValue)
                {
                    return _incrementBy.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _incrementBy = value;
            }
        }

        [XmlIgnore]
        public bool incrementBySpecified
        {
            get
            {
                return _incrementBy.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _incrementBy = null;
                }
            }
        }

        [XmlAttribute]
        public string replacementCharacter
        {
            get
            {
                return _replacementCharacter;
            }
            set
            {
                _replacementCharacter = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(RepeatedItem));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RepeatedItem object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an RepeatedItem object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output RepeatedItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out RepeatedItem obj, out Exception exception)
        {
            exception = null;
            obj = default(RepeatedItem);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out RepeatedItem obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static RepeatedItem Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((RepeatedItem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RepeatedItem Deserialize(Stream s)
        {
            return ((RepeatedItem)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current RepeatedItem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an RepeatedItem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RepeatedItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out RepeatedItem obj, out Exception exception)
        {
            exception = null;
            obj = default(RepeatedItem);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out RepeatedItem obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static RepeatedItem LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The Item complex type shall be the base type for hardware entities.
    /// </summary>
    [XmlIncludeAttribute(typeof(Capability))]
    [XmlIncludeAttribute(typeof(MatrixSwitch))]
    [XmlIncludeAttribute(typeof(RepeatedItem))]
    [XmlIncludeAttribute(typeof(MatrixPort))]
    [XmlIncludeAttribute(typeof(SwitchPort))]
    [XmlIncludeAttribute(typeof(Switch))]
    [XmlIncludeAttribute(typeof(Resource))]
    [XmlIncludeAttribute(typeof(CrossPointSwitch))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Item
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Extension _extension;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The Item/Description child element shall be a description of the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// Base type: c:Extension
        /// Properties: isRef 0, content complex
        /// The Item/Extension child element shall provide a specific extension point for use cases that require elements not provided in the basic structure.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public Extension Extension
        {
            get
            {
                return _extension;
            }
            set
            {
                _extension = value;
            }
        }

        /// <summary>
        /// A descriptive or common name for the hardware item.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Item));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Item object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Item object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Item object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Item obj, out Exception exception)
        {
            exception = null;
            obj = default(Item);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Item obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Item Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Item)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Item Deserialize(Stream s)
        {
            return ((Item)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Item object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Item object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Item object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Item obj, out Exception exception)
        {
            exception = null;
            obj = default(Item);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Item obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Item LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:Item
    /// Properties: base hc:Item
    /// The Capability complex type shall identify a specific capability and interface of a hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Capability : Item
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Interface _interface;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Extension _signalDescription;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:Interface
        /// Properties: isRef 0, content complex
        /// The Capability/Interface child element shall identify the interface (as ports and optionally connectors) to the c:Capability/SignalDescription of the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public Interface Interface
        {
            get
            {
                return _interface;
            }
            set
            {
                _interface = value;
            }
        }

        /// <summary>
        /// Base type: c:Extension
        /// Properties: isRef 0, content complex
        /// The Capability/SignalDescription child element shall identify the signal capability at the c:Capability/Interface interface of the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public Extension SignalDescription
        {
            get
            {
                return _signalDescription;
            }
            set
            {
                _signalDescription = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Capability));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Capability object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Capability object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Capability object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Capability obj, out Exception exception)
        {
            exception = null;
            obj = default(Capability);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Capability obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static Capability Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Capability)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Capability Deserialize(Stream s)
        {
            return ((Capability)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Capability object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Capability object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Capability object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Capability obj, out Exception exception)
        {
            exception = null;
            obj = default(Capability);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Capability obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static Capability LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:Item
    /// Properties: base hc:Item
    /// The MatrixSwitch complex type shall be the base type for XML schema elements intended to document the name of a matrix switch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class MatrixSwitch : Item
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<MatrixPort> _columns;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<MatrixPort> _rows;

        private static XmlSerializer serializer;

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The MatrixSwitch/Columns child element shall document properties of the columns of a matrix switch.
        /// </summary>
        [XmlArrayAttribute(Order = 0)]
        [XmlArrayItemAttribute("Pin", IsNullable = false)]
        public List<MatrixPort> Columns
        {
            get
            {
                return _columns;
            }
            set
            {
                _columns = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The MatrixSwitch/Rows child element shall document properties of the rows of a matrix switch.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute("Pin", IsNullable = false)]
        public List<MatrixPort> Rows
        {
            get
            {
                return _rows;
            }
            set
            {
                _rows = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(MatrixSwitch));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Columns should be serialized
        /// </summary>
        public virtual bool ShouldSerializeColumns()
        {
            return Columns != null && Columns.Count > 0;
        }

        /// <summary>
        /// Test whether Rows should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRows()
        {
            return Rows != null && Rows.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MatrixSwitch object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an MatrixSwitch object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output MatrixSwitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out MatrixSwitch obj, out Exception exception)
        {
            exception = null;
            obj = default(MatrixSwitch);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out MatrixSwitch obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static MatrixSwitch Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((MatrixSwitch)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static MatrixSwitch Deserialize(Stream s)
        {
            return ((MatrixSwitch)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current MatrixSwitch object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an MatrixSwitch object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MatrixSwitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MatrixSwitch obj, out Exception exception)
        {
            exception = null;
            obj = default(MatrixSwitch);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out MatrixSwitch obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static MatrixSwitch LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:RepeatedItem
    /// Properties: base hc:RepeatedItem
    /// The MatrixPort complex type shall be the base type for XML schema elements intended to document properties of matrix switch port(s).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class MatrixPort : RepeatedItem
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(MatrixPort));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MatrixPort object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an MatrixPort object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output MatrixPort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out MatrixPort obj, out Exception exception)
        {
            exception = null;
            obj = default(MatrixPort);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out MatrixPort obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static MatrixPort Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((MatrixPort)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static MatrixPort Deserialize(Stream s)
        {
            return ((MatrixPort)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current MatrixPort object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an MatrixPort object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MatrixPort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MatrixPort obj, out Exception exception)
        {
            exception = null;
            obj = default(MatrixPort);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out MatrixPort obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static MatrixPort LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:Item
    /// Properties: base hc:Item
    /// The CrossPointSwitch complex type shall be the base type for XML schema elements intended to document properties of a cross point switch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class CrossPointSwitch : Item
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<SwitchPort> _columns;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<SwitchPort> _rows;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _lineCount;

        private static XmlSerializer serializer;

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The CrossPointSwitch/Columns child element shall document properties of the columns of a cross point switch.
        /// </summary>
        [XmlArrayAttribute(Order = 0)]
        [XmlArrayItemAttribute("Port", IsNullable = false)]
        public List<SwitchPort> Columns
        {
            get
            {
                return _columns;
            }
            set
            {
                _columns = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The CrossPointSwitch/Rows child element shall document properties of the rows of a cross point switch.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute("Port", IsNullable = false)]
        public List<SwitchPort> Rows
        {
            get
            {
                return _rows;
            }
            set
            {
                _rows = value;
            }
        }

        /// <summary>
        /// The number of matrix lines available to connect the rows and columns.
        /// </summary>
        [XmlAttribute]
        public int lineCount
        {
            get
            {
                return _lineCount;
            }
            set
            {
                _lineCount = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(CrossPointSwitch));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Columns should be serialized
        /// </summary>
        public virtual bool ShouldSerializeColumns()
        {
            return Columns != null && Columns.Count > 0;
        }

        /// <summary>
        /// Test whether Rows should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRows()
        {
            return Rows != null && Rows.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CrossPointSwitch object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an CrossPointSwitch object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CrossPointSwitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CrossPointSwitch obj, out Exception exception)
        {
            exception = null;
            obj = default(CrossPointSwitch);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CrossPointSwitch obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static CrossPointSwitch Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((CrossPointSwitch)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CrossPointSwitch Deserialize(Stream s)
        {
            return ((CrossPointSwitch)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CrossPointSwitch object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CrossPointSwitch object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CrossPointSwitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CrossPointSwitch obj, out Exception exception)
        {
            exception = null;
            obj = default(CrossPointSwitch);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CrossPointSwitch obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static CrossPointSwitch LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:RepeatedItem
    /// Properties: base hc:RepeatedItem
    /// The SwitchPort complex type shall be the base type for XML schema elements intended to document properties of the switch port.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class SwitchPort : RepeatedItem
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<SwitchPortPin> _pin;

        private static XmlSerializer serializer;

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The SwitchPort/Pin child element shall identify a physical pin of a switch.
        /// </summary>
        [XmlElementAttribute("Pin", Order = 0)]
        public List<SwitchPortPin> Pin
        {
            get
            {
                return _pin;
            }
            set
            {
                _pin = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(SwitchPort));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Pin should be serialized
        /// </summary>
        public virtual bool ShouldSerializePin()
        {
            return Pin != null && Pin.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SwitchPort object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SwitchPort object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SwitchPort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SwitchPort obj, out Exception exception)
        {
            exception = null;
            obj = default(SwitchPort);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SwitchPort obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static SwitchPort Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((SwitchPort)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SwitchPort Deserialize(Stream s)
        {
            return ((SwitchPort)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SwitchPort object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SwitchPort object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SwitchPort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SwitchPort obj, out Exception exception)
        {
            exception = null;
            obj = default(SwitchPort);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SwitchPort obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SwitchPort LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class SwitchPortPin
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _line;

        private static XmlSerializer serializer;

        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        [XmlAttribute]
        public int line
        {
            get
            {
                return _line;
            }
            set
            {
                _line = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(SwitchPortPin));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SwitchPortPin object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SwitchPortPin object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SwitchPortPin object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SwitchPortPin obj, out Exception exception)
        {
            exception = null;
            obj = default(SwitchPortPin);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SwitchPortPin obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static SwitchPortPin Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((SwitchPortPin)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SwitchPortPin Deserialize(Stream s)
        {
            return ((SwitchPortPin)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SwitchPortPin object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SwitchPortPin object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SwitchPortPin object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SwitchPortPin obj, out Exception exception)
        {
            exception = null;
            obj = default(SwitchPortPin);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SwitchPortPin obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SwitchPortPin LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:RepeatedItem
    /// Properties: base hc:RepeatedItem
    /// The Switch complex type shall be the base type for XML schema elements intended to document properties of a switch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Switch : RepeatedItem
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Interface _interface;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<SwitchRelaySetting> _connections;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:Interface
        /// Properties: isRef 0, content complex
        /// The Switch/Interface child element shall identify the hardware interface to the switch.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public Interface Interface
        {
            get
            {
                return _interface;
            }
            set
            {
                _interface = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The Switch/Connections child element shall identify relay settings.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute("RelaySetting", IsNullable = false)]
        public List<SwitchRelaySetting> Connections
        {
            get
            {
                return _connections;
            }
            set
            {
                _connections = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Switch));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Connections should be serialized
        /// </summary>
        public virtual bool ShouldSerializeConnections()
        {
            return Connections != null && Connections.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Switch object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Switch object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Switch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Switch obj, out Exception exception)
        {
            exception = null;
            obj = default(Switch);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Switch obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static Switch Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Switch)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Switch Deserialize(Stream s)
        {
            return ((Switch)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Switch object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Switch object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Switch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Switch obj, out Exception exception)
        {
            exception = null;
            obj = default(Switch);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Switch obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static Switch LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The Switch/Connections/RelaySetting child element shall identify a relay setting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class SwitchRelaySetting
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<SwitchRelaySettingRelayConnection> _relayConnection;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;

        private static XmlSerializer serializer;

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The Switch/Connections/RelaySetting/RelayConnection child element shall identify a path established by the relay setting.
        /// </summary>
        [XmlElementAttribute("RelayConnection", Order = 0)]
        public List<SwitchRelaySettingRelayConnection> RelayConnection
        {
            get
            {
                return _relayConnection;
            }
            set
            {
                _relayConnection = value;
            }
        }

        /// <summary>
        /// A descriptive or common name for the relay’s position. Example: Open.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(SwitchRelaySetting));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether RelayConnection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRelayConnection()
        {
            return RelayConnection != null && RelayConnection.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SwitchRelaySetting object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SwitchRelaySetting object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SwitchRelaySetting object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SwitchRelaySetting obj, out Exception exception)
        {
            exception = null;
            obj = default(SwitchRelaySetting);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SwitchRelaySetting obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static SwitchRelaySetting Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((SwitchRelaySetting)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SwitchRelaySetting Deserialize(Stream s)
        {
            return ((SwitchRelaySetting)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SwitchRelaySetting object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SwitchRelaySetting object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SwitchRelaySetting object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SwitchRelaySetting obj, out Exception exception)
        {
            exception = null;
            obj = default(SwitchRelaySetting);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SwitchRelaySetting obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SwitchRelaySetting LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The Switch/Connections/RelaySetting/RelayConnection child element shall identify a path established by the relay setting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class SwitchRelaySettingRelayConnection
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _from;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _to;

        private static XmlSerializer serializer;

        /// <summary>
        /// A descriptive or common name for the beginning point to which the path is associated. Example: J1-34.
        /// </summary>
        [XmlAttribute]
        public string from
        {
            get
            {
                return _from;
            }
            set
            {
                _from = value;
            }
        }

        /// <summary>
        /// A descriptive or common name for the end point to which the path is associated. Example: J1-243.
        /// </summary>
        [XmlAttribute]
        public string to
        {
            get
            {
                return _to;
            }
            set
            {
                _to = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(SwitchRelaySettingRelayConnection));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SwitchRelaySettingRelayConnection object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SwitchRelaySettingRelayConnection object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SwitchRelaySettingRelayConnection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SwitchRelaySettingRelayConnection obj, out Exception exception)
        {
            exception = null;
            obj = default(SwitchRelaySettingRelayConnection);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SwitchRelaySettingRelayConnection obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static SwitchRelaySettingRelayConnection Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((SwitchRelaySettingRelayConnection)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SwitchRelaySettingRelayConnection Deserialize(Stream s)
        {
            return ((SwitchRelaySettingRelayConnection)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SwitchRelaySettingRelayConnection object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SwitchRelaySettingRelayConnection object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SwitchRelaySettingRelayConnection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SwitchRelaySettingRelayConnection obj, out Exception exception)
        {
            exception = null;
            obj = default(SwitchRelaySettingRelayConnection);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SwitchRelaySettingRelayConnection obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SwitchRelaySettingRelayConnection LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:RepeatedItem
    /// Properties: base hc:RepeatedItem
    /// The Resource complex type shall be the base type for XML schema elements intended to document a resource and define its interface(s).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Resource : RepeatedItem
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Interface _interface;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Trigger> _triggers;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _index;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:Interface
        /// Properties: isRef 0, content complex
        /// The Resource/Interface child element shall identify the electrical interface(s) to the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public Interface Interface
        {
            get
            {
                return _interface;
            }
            set
            {
                _interface = value;
            }
        }

        /// <summary>
        /// Base type: hc:Triggers
        /// Properties: isRef 0, content complex
        /// The Resource/Triggers child element shall identify the triggering associated with the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute(IsNullable = false)]
        public List<Trigger> Triggers
        {
            get
            {
                return _triggers;
            }
            set
            {
                _triggers = value;
            }
        }

        /// <summary>
        /// The index of the element within an hc:RepeatedItem array.
        /// </summary>
        [XmlAttribute]
        public int index
        {
            get
            {
                if (_index.HasValue)
                {
                    return _index.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _index = value;
            }
        }

        [XmlIgnore]
        public bool indexSpecified
        {
            get
            {
                return _index.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _index = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Resource));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Triggers should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTriggers()
        {
            return Triggers != null && Triggers.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Resource object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Resource object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Resource object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Resource obj, out Exception exception)
        {
            exception = null;
            obj = default(Resource);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Resource obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static Resource Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Resource)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Resource Deserialize(Stream s)
        {
            return ((Resource)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Resource object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Resource object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Resource object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Resource obj, out Exception exception)
        {
            exception = null;
            obj = default(Resource);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Resource obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static Resource LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The Trigger complex type shall be the base type for XML schema elements intended to document properties of a trigger signal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Trigger
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<TriggerPropertyGroup> _triggerProperties;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<TriggerPort> _triggerPorts;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The Trigger/Description child element shall provide an accurate description of what the trigger signal is (e.g., electrically, in time, what the trigger is based upon).
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The Trigger/TriggerProperties child element shall identify the signal that will generate the trigger.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute(IsNullable = false)]
        public List<TriggerPropertyGroup> TriggerProperties
        {
            get
            {
                return _triggerProperties;
            }
            set
            {
                _triggerProperties = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The Trigger/TriggerPorts child element shall identify the ports on which the trigger may occur.
        /// </summary>
        [XmlArrayAttribute(Order = 2)]
        [XmlArrayItemAttribute(IsNullable = false)]
        public List<TriggerPort> TriggerPorts
        {
            get
            {
                return _triggerPorts;
            }
            set
            {
                _triggerPorts = value;
            }
        }

        /// <summary>
        /// A descriptive or common name for the trigger.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Trigger));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether TriggerProperties should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTriggerProperties()
        {
            return TriggerProperties != null && TriggerProperties.Count > 0;
        }

        /// <summary>
        /// Test whether TriggerPorts should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTriggerPorts()
        {
            return TriggerPorts != null && TriggerPorts.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Trigger object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Trigger object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Trigger object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Trigger obj, out Exception exception)
        {
            exception = null;
            obj = default(Trigger);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Trigger obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Trigger Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Trigger)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Trigger Deserialize(Stream s)
        {
            return ((Trigger)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Trigger object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Trigger object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Trigger object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Trigger obj, out Exception exception)
        {
            exception = null;
            obj = default(Trigger);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Trigger obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Trigger LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: abstract true
    /// The TriggerPropertyGroup complex type shall be the base type for XML schema elements intended to document properties of a trigger signal.
    /// </summary>
    [XmlIncludeAttribute(typeof(LANTriggerPropertyGroup))]
    [XmlIncludeAttribute(typeof(SoftwareTriggerPropertyGroup))]
    [XmlIncludeAttribute(typeof(DigitalTriggerPropertyGroup))]
    [XmlIncludeAttribute(typeof(AnalogTriggerPropertyGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public abstract partial class TriggerPropertyGroup
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Extension _extension;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The TriggerPropertyGroup/Description child element shall describe the trigger signal.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// Base type: c:Extension
        /// Properties: isRef 0, content complex
        /// The TriggerPropertyGroup/Extension child element shall provide a specific extension point for use cases that require elements not provided in the basic structure.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public Extension Extension
        {
            get
            {
                return _extension;
            }
            set
            {
                _extension = value;
            }
        }

        /// <summary>
        /// A descriptive or common name for the signal that will generate the trigger.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(TriggerPropertyGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TriggerPropertyGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TriggerPropertyGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TriggerPropertyGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TriggerPropertyGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(TriggerPropertyGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TriggerPropertyGroup obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static TriggerPropertyGroup Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TriggerPropertyGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TriggerPropertyGroup Deserialize(Stream s)
        {
            return ((TriggerPropertyGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TriggerPropertyGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TriggerPropertyGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TriggerPropertyGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TriggerPropertyGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(TriggerPropertyGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TriggerPropertyGroup obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TriggerPropertyGroup LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:TriggerPropertyGroup
    /// Properties: base hc:TriggerPropertyGroup
    /// The LANTriggerPropertyGroup complex type shall be the base type for XML schema elements intended to document properties of a local area network (LAN) trigger.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class LANTriggerPropertyGroup : TriggerPropertyGroup
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(LANTriggerPropertyGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LANTriggerPropertyGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an LANTriggerPropertyGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output LANTriggerPropertyGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out LANTriggerPropertyGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(LANTriggerPropertyGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out LANTriggerPropertyGroup obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static LANTriggerPropertyGroup Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((LANTriggerPropertyGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static LANTriggerPropertyGroup Deserialize(Stream s)
        {
            return ((LANTriggerPropertyGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current LANTriggerPropertyGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an LANTriggerPropertyGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LANTriggerPropertyGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LANTriggerPropertyGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(LANTriggerPropertyGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out LANTriggerPropertyGroup obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static LANTriggerPropertyGroup LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:TriggerPropertyGroup
    /// Properties: base hc:TriggerPropertyGroup
    /// The SoftwareTriggerPropertyGroup complex type shall be the base type for XML schema elements intended to document properties of a trigger initiated by software.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class SoftwareTriggerPropertyGroup : TriggerPropertyGroup
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(SoftwareTriggerPropertyGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SoftwareTriggerPropertyGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SoftwareTriggerPropertyGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SoftwareTriggerPropertyGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SoftwareTriggerPropertyGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(SoftwareTriggerPropertyGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SoftwareTriggerPropertyGroup obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static SoftwareTriggerPropertyGroup Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((SoftwareTriggerPropertyGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SoftwareTriggerPropertyGroup Deserialize(Stream s)
        {
            return ((SoftwareTriggerPropertyGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SoftwareTriggerPropertyGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SoftwareTriggerPropertyGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SoftwareTriggerPropertyGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SoftwareTriggerPropertyGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(SoftwareTriggerPropertyGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SoftwareTriggerPropertyGroup obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static SoftwareTriggerPropertyGroup LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:TriggerPropertyGroup
    /// Properties: base hc:TriggerPropertyGroup
    /// The DigitalTriggerPropertyGroup complex type shall be the base type for XML schema elements intended to document properties of a digital signal-based trigger.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class DigitalTriggerPropertyGroup : TriggerPropertyGroup
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private DetectionType _detection;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private MinPulseWidthType _minPulseWidth;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:DetectionType
        /// Properties: isRef 0, content complex
        /// The DigitalTriggerPropertyGroup/Detection child element shall identify the properties of a digital trigger.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public DetectionType Detection
        {
            get
            {
                return _detection;
            }
            set
            {
                _detection = value;
            }
        }

        /// <summary>
        /// Base type: hc:MinPulseWidthType
        /// Properties: isRef 0, content complex
        /// The DigitalTriggerPropertyGroup/MinPulseWidth child element shall identify the minimum pulse-width of the digital trigger.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public MinPulseWidthType MinPulseWidth
        {
            get
            {
                return _minPulseWidth;
            }
            set
            {
                _minPulseWidth = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(DigitalTriggerPropertyGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DigitalTriggerPropertyGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DigitalTriggerPropertyGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DigitalTriggerPropertyGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DigitalTriggerPropertyGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(DigitalTriggerPropertyGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DigitalTriggerPropertyGroup obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static DigitalTriggerPropertyGroup Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DigitalTriggerPropertyGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DigitalTriggerPropertyGroup Deserialize(Stream s)
        {
            return ((DigitalTriggerPropertyGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DigitalTriggerPropertyGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DigitalTriggerPropertyGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DigitalTriggerPropertyGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DigitalTriggerPropertyGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(DigitalTriggerPropertyGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DigitalTriggerPropertyGroup obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static DigitalTriggerPropertyGroup LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The DetectionType complex type shall be the base type for XML schema elements intended to document properties of a digital trigger. The properties shall be either edge detection or level detection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class DetectionType
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Nullable<DigitalEdge> _edgeDetection;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Nullable<DigitalLevel> _levelDetection;

        private static XmlSerializer serializer;

        /// <summary>
        /// An identification of the digital edge that shall be present for the trigger to occur. The edge shall be Rising, Falling, or Selectable.
        /// </summary>
        [XmlAttribute]
        public DigitalEdge edgeDetection
        {
            get
            {
                if (_edgeDetection.HasValue)
                {
                    return _edgeDetection.Value;
                }
                else
                {
                    return default(DigitalEdge);
                }
            }
            set
            {
                _edgeDetection = value;
            }
        }

        [XmlIgnore]
        public bool edgeDetectionSpecified
        {
            get
            {
                return _edgeDetection.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _edgeDetection = null;
                }
            }
        }

        /// <summary>
        /// An identification of the digital level that shall be present for the trigger to occur. The level shall be High, Low, or Selectable.
        /// </summary>
        [XmlAttribute]
        public DigitalLevel levelDetection
        {
            get
            {
                if (_levelDetection.HasValue)
                {
                    return _levelDetection.Value;
                }
                else
                {
                    return default(DigitalLevel);
                }
            }
            set
            {
                _levelDetection = value;
            }
        }

        [XmlIgnore]
        public bool levelDetectionSpecified
        {
            get
            {
                return _levelDetection.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _levelDetection = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(DetectionType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DetectionType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DetectionType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DetectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DetectionType obj, out Exception exception)
        {
            exception = null;
            obj = default(DetectionType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DetectionType obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static DetectionType Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DetectionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DetectionType Deserialize(Stream s)
        {
            return ((DetectionType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DetectionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DetectionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DetectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DetectionType obj, out Exception exception)
        {
            exception = null;
            obj = default(DetectionType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DetectionType obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DetectionType LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: restriction of xs:string
    /// Enumerations: Rising | Falling | Selectable
    /// This type shall be used as the base type for the DetectionType XML schema attribute for specifying the edge of a digital trigger signal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public enum DigitalEdge
    {

        Rising,

        Falling,

        Selectable,
    }

    /// <summary>
    /// Base type: restriction of xs:string
    /// Enumerations: High | Low | Selectable
    /// This type shall be used as the base type for the DetectionType XML schema attribute for specifying the logic level of a digital trigger signal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public enum DigitalLevel
    {

        High,

        Low,

        Selectable,
    }

    /// <summary>
    /// The MinPulseWidthType complex type shall be the base type for XML schema elements intended to document the minimum pulse width of a digital-signal-based trigger.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class MinPulseWidthType
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private double _value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private PulseUnits _units;

        private static XmlSerializer serializer;

        /// <summary>
        /// The numeric value of the pulse width.
        /// </summary>
        [XmlAttribute]
        public double value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        /// <summary>
        /// The dimension associated with the pulse width’s value. Allowable dimensions shall be S, mS, uS, nS, pS, or fS.
        /// </summary>
        [XmlAttribute]
        public PulseUnits units
        {
            get
            {
                return _units;
            }
            set
            {
                _units = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(MinPulseWidthType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MinPulseWidthType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an MinPulseWidthType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output MinPulseWidthType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out MinPulseWidthType obj, out Exception exception)
        {
            exception = null;
            obj = default(MinPulseWidthType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out MinPulseWidthType obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static MinPulseWidthType Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((MinPulseWidthType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static MinPulseWidthType Deserialize(Stream s)
        {
            return ((MinPulseWidthType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current MinPulseWidthType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an MinPulseWidthType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MinPulseWidthType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MinPulseWidthType obj, out Exception exception)
        {
            exception = null;
            obj = default(MinPulseWidthType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out MinPulseWidthType obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static MinPulseWidthType LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: restriction of xs:string
    /// Enumerations: S | mS | uS | nS | pS | fS
    /// This type shall be used as the base type for the MinPulseWidthType XML schema attribute for specifying the dimensions of the units.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public enum PulseUnits
    {

        S,

        mS,

        uS,

        nS,

        pS,

        fS,
    }

    /// <summary>
    /// Base type: Extension of hc:TriggerPropertyGroup
    /// Properties: base hc:TriggerPropertyGroup
    /// The AnalogTriggerPropertyGroup complex type shall be the base type for XML schema elements intended to document properties of an analog signal-based trigger.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class AnalogTriggerPropertyGroup : TriggerPropertyGroup
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private LevelType _level;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:LevelType
        /// Properties: isRef 0, content complex
        /// The AnalogTriggerPropertyGroup/Level child element shall identify an analog trigger level (value, dimensions, and resolution).
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public LevelType Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(AnalogTriggerPropertyGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AnalogTriggerPropertyGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an AnalogTriggerPropertyGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AnalogTriggerPropertyGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AnalogTriggerPropertyGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(AnalogTriggerPropertyGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AnalogTriggerPropertyGroup obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static AnalogTriggerPropertyGroup Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((AnalogTriggerPropertyGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AnalogTriggerPropertyGroup Deserialize(Stream s)
        {
            return ((AnalogTriggerPropertyGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AnalogTriggerPropertyGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AnalogTriggerPropertyGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AnalogTriggerPropertyGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AnalogTriggerPropertyGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(AnalogTriggerPropertyGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AnalogTriggerPropertyGroup obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static AnalogTriggerPropertyGroup LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The LevelType complex type shall be the base type for XML schema elements intended to document properties of an analog voltage in order for a trigger to occur.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class LevelType
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private double _value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private LevelUnits _units;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int _numberOfBits;

        private static XmlSerializer serializer;

        /// <summary>
        /// The amplitude of the trigger signal.
        /// </summary>
        [XmlAttribute]
        public double value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        /// <summary>
        /// The units associated with the trigger signal amplitude. Either %FullScale or +/-V shall be specified.
        /// </summary>
        [XmlAttribute]
        public LevelUnits units
        {
            get
            {
                return _units;
            }
            set
            {
                _units = value;
            }
        }

        /// <summary>
        /// The resolution of the trigger signal amplitude reading. An integer number shall be specified.
        /// </summary>
        [XmlAttribute]
        public int numberOfBits
        {
            get
            {
                return _numberOfBits;
            }
            set
            {
                _numberOfBits = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(LevelType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LevelType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an LevelType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output LevelType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out LevelType obj, out Exception exception)
        {
            exception = null;
            obj = default(LevelType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out LevelType obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static LevelType Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((LevelType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static LevelType Deserialize(Stream s)
        {
            return ((LevelType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current LevelType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an LevelType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LevelType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LevelType obj, out Exception exception)
        {
            exception = null;
            obj = default(LevelType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out LevelType obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static LevelType LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: restriction of xs:string
    /// Enumerations: %FullScale | +/-V
    /// This type shall be used as the base type for the LevelType XML schema attribute to specify the dimension of this attribute.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public enum LevelUnits
    {

        [XmlEnumAttribute("%FullScale")]
        FullScale,

        [XmlEnumAttribute("+/-V")]
        V,
    }

    /// <summary>
    /// The TriggerPort complex type shall be the base type for XML schema elements intended to document properties of a trigger port.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class TriggerPort
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private PortDirection _direction;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private TriggerPortType _type;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The TriggerPort/Description child element shall identify the interfaces that this trigger may be routed either to or from.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// A descriptive or common name for the port.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        /// <summary>
        /// An enumeration providing for the specification of the direction in which data move on the described port. Enumeration values are Input, Output, and Bi-Directional.
        /// </summary>
        [XmlAttribute]
        public PortDirection direction
        {
            get
            {
                return _direction;
            }
            set
            {
                _direction = value;
            }
        }

        /// <summary>
        /// An identification of the type of signal that will be present at the port (i.e., Digital, Analog, Software, or LAN).
        /// </summary>
        [XmlAttribute]
        public TriggerPortType type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(TriggerPort));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TriggerPort object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TriggerPort object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TriggerPort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TriggerPort obj, out Exception exception)
        {
            exception = null;
            obj = default(TriggerPort);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TriggerPort obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static TriggerPort Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TriggerPort)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TriggerPort Deserialize(Stream s)
        {
            return ((TriggerPort)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TriggerPort object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TriggerPort object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TriggerPort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TriggerPort obj, out Exception exception)
        {
            exception = null;
            obj = default(TriggerPort);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TriggerPort obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TriggerPort LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: restriction of xs:string
    /// Enumerations: Digital | Analog | Software | LAN
    /// This type shall be used as the base type for the TriggerPort XML schema attribute for specifying what type of trigger will be on a particular port.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public enum TriggerPortType
    {

        Digital,

        Analog,

        Software,

        LAN,
    }

    /// <summary>
    /// The Resources complex type shall be the base type for XML schema elements intended to document resources and define their interfaces.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public partial class Resources
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Resource> _resource;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:Resource
        /// Properties: isRef 0, content complex
        /// The Resources/Resource child element shall identify a resource and to define the resources interface.
        /// </summary>
        [XmlElementAttribute("Resource", Order = 0)]
        public List<Resource> Resource
        {
            get
            {
                return _resource;
            }
            set
            {
                _resource = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Resources));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Resource should be serialized
        /// </summary>
        public virtual bool ShouldSerializeResource()
        {
            return Resource != null && Resource.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Resources object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Resources object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Resources object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Resources obj, out Exception exception)
        {
            exception = null;
            obj = default(Resources);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Resources obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Resources Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Resources)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Resources Deserialize(Stream s)
        {
            return ((Resources)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Resources object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Resources object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Resources object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Resources obj, out Exception exception)
        {
            exception = null;
            obj = default(Resources);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Resources obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Resources LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The Triggers complex type shall be the base type for XML schema elements intended to document properties of one or more trigger signals.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public partial class Triggers
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Trigger> _trigger;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:Trigger
        /// Properties: isRef 0, content complex
        /// The Triggers/Trigger child element shall document the properties of a trigger signal.
        /// </summary>
        [XmlElementAttribute("Trigger", Order = 0)]
        public List<Trigger> Trigger
        {
            get
            {
                return _trigger;
            }
            set
            {
                _trigger = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Triggers));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Trigger should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTrigger()
        {
            return Trigger != null && Trigger.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Triggers object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Triggers object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Triggers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Triggers obj, out Exception exception)
        {
            exception = null;
            obj = default(Triggers);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Triggers obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Triggers Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Triggers)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Triggers Deserialize(Stream s)
        {
            return ((Triggers)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Triggers object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Triggers object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Triggers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Triggers obj, out Exception exception)
        {
            exception = null;
            obj = default(Triggers);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Triggers obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Triggers LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The Switching complex type shall be the base type for XML schema elements intended to document properties of a switching subsystem.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public partial class Switching
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Item> _items;

        private static XmlSerializer serializer;

        [XmlElementAttribute("CrossPointSwitch", typeof(CrossPointSwitch), Order = 0)]
        [XmlElementAttribute("MatrixSwitch", typeof(MatrixSwitch), Order = 0)]
        [XmlElementAttribute("Switch", typeof(Switch), Order = 0)]
        public List<Item> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Switching));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Items should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItems()
        {
            return Items != null && Items.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Switching object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Switching object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Switching object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Switching obj, out Exception exception)
        {
            exception = null;
            obj = default(Switching);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Switching obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Switching Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Switching)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Switching Deserialize(Stream s)
        {
            return ((Switching)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Switching object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Switching object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Switching object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Switching obj, out Exception exception)
        {
            exception = null;
            obj = default(Switching);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Switching obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Switching LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The FacilityRequirements complex type shall be the base type for XML schema elements intended to document properties of the facility required to perform testing.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public partial class FacilitiesRequirements
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Interface _facilitiesInterface;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Document> _facilityRequirementsDocuments;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _hydraulic;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _pneumatic;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _cooling;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Extension _extension;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:Interface
        /// Properties: isRef 0, content complex
        /// The FacilitiesRequirements/FacilitiesInterface child element shall identify any nonpower interfaces (in the form of a c:Interface) of the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public Interface FacilitiesInterface
        {
            get
            {
                return _facilitiesInterface;
            }
            set
            {
                _facilitiesInterface = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The FacilitiesRequirements/FacilityRequirementsDocuments child element shall identify all of the facility’s requirements documents for the hardware item.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute("FacilitiesRequirementsDocument", IsNullable = false)]
        public List<Document> FacilityRequirementsDocuments
        {
            get
            {
                return _facilityRequirementsDocuments;
            }
            set
            {
                _facilityRequirementsDocuments = value;
            }
        }

        /// <summary>
        /// Base type: xs:string
        /// Properties: isRef 0, content simple
        /// The FacilitiesRequirements/Hydraulic child element shall identify hydraulic requirements of the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 2)]
        public string Hydraulic
        {
            get
            {
                return _hydraulic;
            }
            set
            {
                _hydraulic = value;
            }
        }

        /// <summary>
        /// Base type: xs:string
        /// Properties: isRef 0, content simple
        /// The FacilitiesRequirements/Pneumatic child element shall identify pneumatic requirements of the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 3)]
        public string Pneumatic
        {
            get
            {
                return _pneumatic;
            }
            set
            {
                _pneumatic = value;
            }
        }

        /// <summary>
        /// Base type: xs:string
        /// Properties: isRef 0, content simple
        /// The FacilitiesRequirements/Cooling child element shall identify any cooling requirements of the hardware item.
        /// </summary>
        [XmlElementAttribute(Order = 4)]
        public string Cooling
        {
            get
            {
                return _cooling;
            }
            set
            {
                _cooling = value;
            }
        }

        /// <summary>
        /// Base type: c:Extension
        /// Properties: isRef 0, content complex
        /// The FacilitiesRequirements/Extension child element shall provide a specific extension point for use cases that require elements not provided in the basic structure.
        /// </summary>
        [XmlElementAttribute(Order = 5)]
        public Extension Extension
        {
            get
            {
                return _extension;
            }
            set
            {
                _extension = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(FacilitiesRequirements));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether FacilityRequirementsDocuments should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFacilityRequirementsDocuments()
        {
            return FacilityRequirementsDocuments != null && FacilityRequirementsDocuments.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FacilitiesRequirements object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an FacilitiesRequirements object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output FacilitiesRequirements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FacilitiesRequirements obj, out Exception exception)
        {
            exception = null;
            obj = default(FacilitiesRequirements);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FacilitiesRequirements obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static FacilitiesRequirements Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((FacilitiesRequirements)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FacilitiesRequirements Deserialize(Stream s)
        {
            return ((FacilitiesRequirements)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current FacilitiesRequirements object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FacilitiesRequirements object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FacilitiesRequirements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FacilitiesRequirements obj, out Exception exception)
        {
            exception = null;
            obj = default(FacilitiesRequirements);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FacilitiesRequirements obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FacilitiesRequirements LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The PowerSpecifications complex type shall be the base type for XML schema elements intended to document the input power requirements of a hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public partial class PowerSpecifications
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<object> _items;

        private static XmlSerializer serializer;

        [XmlElementAttribute("AC", typeof(PowerSpecificationsAC), Order = 0)]
        [XmlElementAttribute("DC", typeof(PowerSpecificationsDC), Order = 0)]
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(PowerSpecifications));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Items should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItems()
        {
            return Items != null && Items.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PowerSpecifications object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PowerSpecifications object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PowerSpecifications object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PowerSpecifications obj, out Exception exception)
        {
            exception = null;
            obj = default(PowerSpecifications);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PowerSpecifications obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static PowerSpecifications Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((PowerSpecifications)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PowerSpecifications Deserialize(Stream s)
        {
            return ((PowerSpecifications)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PowerSpecifications object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PowerSpecifications object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PowerSpecifications object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PowerSpecifications obj, out Exception exception)
        {
            exception = null;
            obj = default(PowerSpecifications);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PowerSpecifications obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PowerSpecifications LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The Capabilities complex type shall be used as the base type for XML schema elements intended to document capabilities and interconnections of a hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public partial class Capabilities
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<object> _items;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Mapping> _capabilityMap;

        private static XmlSerializer serializer;

        [XmlElementAttribute("CapabilitiesReference", typeof(DocumentReference), Order = 0)]
        [XmlElementAttribute("Capability", typeof(Capability), Order = 0)]
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        /// <summary>
        /// Base type: hc:CapabilityMap
        /// Properties: isRef 0, content complex
        /// The Capabilities/CapabilityMap child element shall identify how the hardware item is connected.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute(IsNullable = false)]
        public List<Mapping> CapabilityMap
        {
            get
            {
                return _capabilityMap;
            }
            set
            {
                _capabilityMap = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Capabilities));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Items should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItems()
        {
            return Items != null && Items.Count > 0;
        }

        /// <summary>
        /// Test whether CapabilityMap should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCapabilityMap()
        {
            return CapabilityMap != null && CapabilityMap.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Capabilities object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Capabilities object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Capabilities object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Capabilities obj, out Exception exception)
        {
            exception = null;
            obj = default(Capabilities);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Capabilities obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Capabilities Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Capabilities)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Capabilities Deserialize(Stream s)
        {
            return ((Capabilities)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Capabilities object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Capabilities object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Capabilities object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Capabilities obj, out Exception exception)
        {
            exception = null;
            obj = default(Capabilities);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Capabilities obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Capabilities LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The Mapping complex type shall be the base type for XML schema elements intended to document the mapping of capabilities to ports of the hardware item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Mapping
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Network> _map;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _baseIndex;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _count;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int? _incrementBy;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _replacementCharacter;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:Network
        /// Properties: isRef 0, content complex
        /// The Mapping/Map child element shall identify a specific capability to a specific port.
        /// </summary>
        [XmlElementAttribute("Map", Order = 0)]
        public List<Network> Map
        {
            get
            {
                return _map;
            }
            set
            {
                _map = value;
            }
        }

        [XmlAttribute]
        public int baseIndex
        {
            get
            {
                if (_baseIndex.HasValue)
                {
                    return _baseIndex.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _baseIndex = value;
            }
        }

        [XmlIgnore]
        public bool baseIndexSpecified
        {
            get
            {
                return _baseIndex.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _baseIndex = null;
                }
            }
        }

        [XmlAttribute]
        public int count
        {
            get
            {
                if (_count.HasValue)
                {
                    return _count.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _count = value;
            }
        }

        [XmlIgnore]
        public bool countSpecified
        {
            get
            {
                return _count.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _count = null;
                }
            }
        }

        [XmlAttribute]
        public int incrementBy
        {
            get
            {
                if (_incrementBy.HasValue)
                {
                    return _incrementBy.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _incrementBy = value;
            }
        }

        [XmlIgnore]
        public bool incrementBySpecified
        {
            get
            {
                return _incrementBy.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _incrementBy = null;
                }
            }
        }

        [XmlAttribute]
        public string replacementCharacter
        {
            get
            {
                return _replacementCharacter;
            }
            set
            {
                _replacementCharacter = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Mapping));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Map should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMap()
        {
            return Map != null && Map.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Mapping object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Mapping object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Mapping object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Mapping obj, out Exception exception)
        {
            exception = null;
            obj = default(Mapping);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Mapping obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Mapping Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Mapping)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Mapping Deserialize(Stream s)
        {
            return ((Mapping)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Mapping object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Mapping object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Mapping object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Mapping obj, out Exception exception)
        {
            exception = null;
            obj = default(Mapping);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Mapping obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Mapping LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The CapabilityMap complex type shall document the mapping of capabilities to interfaces.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public partial class CapabilityMap
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Mapping> _mapping;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:Mapping
        /// Properties: isRef 0, content complex
        /// The CapabiliyMap/Mapping child element shall identify the capability to interface mapping.
        /// </summary>
        [XmlElementAttribute("Mapping", Order = 0)]
        public List<Mapping> Mapping
        {
            get
            {
                return _mapping;
            }
            set
            {
                _mapping = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(CapabilityMap));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Mapping should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMapping()
        {
            return Mapping != null && Mapping.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CapabilityMap object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an CapabilityMap object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CapabilityMap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CapabilityMap obj, out Exception exception)
        {
            exception = null;
            obj = default(CapabilityMap);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CapabilityMap obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static CapabilityMap Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((CapabilityMap)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CapabilityMap Deserialize(Stream s)
        {
            return ((CapabilityMap)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CapabilityMap object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CapabilityMap object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CapabilityMap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CapabilityMap obj, out Exception exception)
        {
            exception = null;
            obj = default(CapabilityMap);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CapabilityMap obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CapabilityMap LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The Specifications complex type shall be the specification, and groupings of specifications, that share a common set of conditions. Specifications may be used to define specification traceability (e.g., the certification of the specification) and define the conditions under which the specification is measured.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public partial class Specifications
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> _conditions;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> _certifications;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<object> _items;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: hc:SpecificationConditions
        /// Properties: isRef 0, content complex
        /// The Specifications/Conditions child element shall identify the conditions under which a specification is measured.
        /// </summary>
        [XmlArrayAttribute(Order = 0)]
        [XmlArrayItemAttribute("Condition", IsNullable = false)]
        public List<string> Conditions
        {
            get
            {
                return _conditions;
            }
            set
            {
                _conditions = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The Specifications/Certifications child element shall identify traceability information for each specification.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute("Certification", IsNullable = false)]
        public List<string> Certifications
        {
            get
            {
                return _certifications;
            }
            set
            {
                _certifications = value;
            }
        }

        [XmlElementAttribute("Group", typeof(SpecificationGroup), Order = 2)]
        [XmlElementAttribute("Specification", typeof(Specification), Order = 2)]
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Specifications));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Conditions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeConditions()
        {
            return Conditions != null && Conditions.Count > 0;
        }

        /// <summary>
        /// Test whether Certifications should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCertifications()
        {
            return Certifications != null && Certifications.Count > 0;
        }

        /// <summary>
        /// Test whether Items should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItems()
        {
            return Items != null && Items.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Specifications object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Specifications object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Specifications object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Specifications obj, out Exception exception)
        {
            exception = null;
            obj = default(Specifications);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Specifications obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Specifications Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Specifications)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Specifications Deserialize(Stream s)
        {
            return ((Specifications)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Specifications object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Specifications object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Specifications object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Specifications obj, out Exception exception)
        {
            exception = null;
            obj = default(Specifications);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Specifications obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Specifications LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The SpecificationGroup complex type shall define the groupings of specifications that share a common set of conditions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class SpecificationGroup
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> _conditions;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<object> _items;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The SpecificationGroup/Description child element shall textually describe the specification group.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// Base type: hc:SpecificationConditions
        /// Properties: isRef 0, content complex
        /// The SpecificationGroup/Conditions child element shall identify the conditions under which the grouped specifications are measured.
        /// </summary>
        [XmlArrayAttribute(Order = 1)]
        [XmlArrayItemAttribute("Condition", IsNullable = false)]
        public List<string> Conditions
        {
            get
            {
                return _conditions;
            }
            set
            {
                _conditions = value;
            }
        }

        [XmlElementAttribute("Group", typeof(SpecificationGroup), Order = 2)]
        [XmlElementAttribute("Specification", typeof(Specification), Order = 2)]
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }

        /// <summary>
        /// A descriptive or common name for the specification group. Example: AC Characteristics.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(SpecificationGroup));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Conditions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeConditions()
        {
            return Conditions != null && Conditions.Count > 0;
        }

        /// <summary>
        /// Test whether Items should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItems()
        {
            return Items != null && Items.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SpecificationGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SpecificationGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SpecificationGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SpecificationGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(SpecificationGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SpecificationGroup obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static SpecificationGroup Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((SpecificationGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SpecificationGroup Deserialize(Stream s)
        {
            return ((SpecificationGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SpecificationGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SpecificationGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SpecificationGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SpecificationGroup obj, out Exception exception)
        {
            exception = null;
            obj = default(SpecificationGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SpecificationGroup obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SpecificationGroup LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: abstract true
    /// The Specification complex type shall be the base type for XML schema elements intended to document each of the actual specifications used to develop the instruments: hc:Characteristic, hc:Feature, hc:Guaranteed, hc:Nominal, hc:Typical, or hc:Specifications collections.
    /// </summary>
    [XmlIncludeAttribute(typeof(Feature))]
    [XmlIncludeAttribute(typeof(Characteristic))]
    [XmlIncludeAttribute(typeof(Nominal))]
    [XmlIncludeAttribute(typeof(Typical))]
    [XmlIncludeAttribute(typeof(Guaranteed))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public abstract partial class Specification
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _description;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private SpecificationDefinition _definition;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> _conditions;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Limit> _limits;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private SpecificationGraph _graph;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> _supplementalInformation;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> _requiredOptions;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> _exclusiveOptions;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string _name;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The Specification/Description child element shall provide a short description in English of the specification.
        /// </summary>
        [XmlElementAttribute(Order = 0)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The Specification/Definition child element shall provide the mathematical description of how the specification is defined and verified, or it shall identify the document where the definition can be found.
        /// </summary>
        [XmlElementAttribute(Order = 1)]
        public SpecificationDefinition Definition
        {
            get
            {
                return _definition;
            }
            set
            {
                _definition = value;
            }
        }

        /// <summary>
        /// Base type: hc:SpecificationConditions
        /// Properties: isRef 0, content complex
        /// The Specification/Conditions child element shall identify the conditions under which the specification is measured.
        /// </summary>
        [XmlArrayAttribute(Order = 2)]
        [XmlArrayItemAttribute("Condition", IsNullable = false)]
        public List<string> Conditions
        {
            get
            {
                return _conditions;
            }
            set
            {
                _conditions = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The Specification/Limits child element shall identify limits for the specification.
        /// </summary>
        [XmlArrayAttribute(Order = 3)]
        [XmlArrayItemAttribute(IsNullable = false)]
        public List<Limit> Limits
        {
            get
            {
                return _limits;
            }
            set
            {
                _limits = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The Specification/Graph child element shall identify specification(s) that can be represented and conveyed to humans only graphically. This identification shall be either via extension or by specifying the URL where the graphical data can be located.
        /// </summary>
        [XmlElementAttribute(Order = 4)]
        public SpecificationGraph Graph
        {
            get
            {
                return _graph;
            }
            set
            {
                _graph = value;
            }
        }

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The Specification/SupplementalInformation child element shall identify any additional information that may be required in order to clarify the specification (such as information typically found in instrumentation datasheet footnotes).
        /// </summary>
        [XmlElementAttribute("SupplementalInformation", Order = 5)]
        public List<string> SupplementalInformation
        {
            get
            {
                return _supplementalInformation;
            }
            set
            {
                _supplementalInformation = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The Specification/RequiredOptions child element shall identify any instrumentation options that are required to be installed in the instrument in order for the specification to be valid.
        /// </summary>
        [XmlArrayAttribute(Order = 6)]
        [XmlArrayItemAttribute("Option", IsNullable = false)]
        public List<string> RequiredOptions
        {
            get
            {
                return _requiredOptions;
            }
            set
            {
                _requiredOptions = value;
            }
        }

        /// <summary>
        /// Properties: isRef 0, content complex
        /// The Specification/ExclusiveOptions child element shall identify any instrumentation options that, if installed in the instrument, would invalidate the specification.
        /// </summary>
        [XmlArrayAttribute(Order = 7)]
        [XmlArrayItemAttribute("Option", IsNullable = false)]
        public List<string> ExclusiveOptions
        {
            get
            {
                return _exclusiveOptions;
            }
            set
            {
                _exclusiveOptions = value;
            }
        }

        /// <summary>
        /// A descriptive or common name for the specification. Example: Acme ABCD DMM Product Specifications.
        /// </summary>
        [XmlAttribute]
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Specification));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Conditions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeConditions()
        {
            return Conditions != null && Conditions.Count > 0;
        }

        /// <summary>
        /// Test whether Limits should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLimits()
        {
            return Limits != null && Limits.Count > 0;
        }

        /// <summary>
        /// Test whether SupplementalInformation should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSupplementalInformation()
        {
            return SupplementalInformation != null && SupplementalInformation.Count > 0;
        }

        /// <summary>
        /// Test whether RequiredOptions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRequiredOptions()
        {
            return RequiredOptions != null && RequiredOptions.Count > 0;
        }

        /// <summary>
        /// Test whether ExclusiveOptions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeExclusiveOptions()
        {
            return ExclusiveOptions != null && ExclusiveOptions.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Specification object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Specification object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Specification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Specification obj, out Exception exception)
        {
            exception = null;
            obj = default(Specification);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Specification obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static Specification Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Specification)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Specification Deserialize(Stream s)
        {
            return ((Specification)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Specification object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Specification object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Specification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Specification obj, out Exception exception)
        {
            exception = null;
            obj = default(Specification);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Specification obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Specification LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Properties: isRef 0, content complex
    /// The Specification/Definition child element shall provide the mathematical description of how the specification is defined and verified, or it shall identify the document where the definition can be found.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class SpecificationDefinition
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object _item;

        private static XmlSerializer serializer;

        [XmlElementAttribute("Document", typeof(Document), Order = 0)]
        [XmlElementAttribute("Text", typeof(string), Order = 0)]
        public object Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(SpecificationDefinition));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SpecificationDefinition object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SpecificationDefinition object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SpecificationDefinition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SpecificationDefinition obj, out Exception exception)
        {
            exception = null;
            obj = default(SpecificationDefinition);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SpecificationDefinition obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static SpecificationDefinition Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((SpecificationDefinition)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SpecificationDefinition Deserialize(Stream s)
        {
            return ((SpecificationDefinition)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SpecificationDefinition object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SpecificationDefinition object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SpecificationDefinition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SpecificationDefinition obj, out Exception exception)
        {
            exception = null;
            obj = default(SpecificationDefinition);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SpecificationDefinition obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SpecificationDefinition LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class SpecificationGraph
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private object _item;

        private static XmlSerializer serializer;

        [XmlElementAttribute("Extension", typeof(Extension), Order = 0)]
        [XmlElementAttribute("URL", typeof(string), DataType = "anyURI", Order = 0)]
        public object Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(SpecificationGraph));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SpecificationGraph object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SpecificationGraph object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SpecificationGraph object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SpecificationGraph obj, out Exception exception)
        {
            exception = null;
            obj = default(SpecificationGraph);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SpecificationGraph obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static SpecificationGraph Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((SpecificationGraph)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SpecificationGraph Deserialize(Stream s)
        {
            return ((SpecificationGraph)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SpecificationGraph object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SpecificationGraph object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SpecificationGraph object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SpecificationGraph obj, out Exception exception)
        {
            exception = null;
            obj = default(SpecificationGraph);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SpecificationGraph obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SpecificationGraph LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:Specification
    /// Properties: base hc:Specification
    /// The Feature complex type shall be the base type for XML schema elements intended to document the features of the instrument not described within a performance description (see hc:Characteristic).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Feature : Specification
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Feature));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Feature object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Feature object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Feature object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Feature obj, out Exception exception)
        {
            exception = null;
            obj = default(Feature);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Feature obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static Feature Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Feature)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Feature Deserialize(Stream s)
        {
            return ((Feature)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Feature object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Feature object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Feature object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Feature obj, out Exception exception)
        {
            exception = null;
            obj = default(Feature);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Feature obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static Feature LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:Specification
    /// Properties: base hc:Specification
    /// The Characteristic complex type shall describe the performance that may be expected from the instrument.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Characteristic : Specification
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Characteristic));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Characteristic object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Characteristic object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Characteristic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Characteristic obj, out Exception exception)
        {
            exception = null;
            obj = default(Characteristic);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Characteristic obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static Characteristic Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Characteristic)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Characteristic Deserialize(Stream s)
        {
            return ((Characteristic)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Characteristic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Characteristic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Characteristic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Characteristic obj, out Exception exception)
        {
            exception = null;
            obj = default(Characteristic);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Characteristic obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static Characteristic LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:Specification
    /// Properties: base hc:Specification
    /// The Nominal complex type shall describe specifications of the instrument that are true by design (however, not tested or measured).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Nominal : Specification
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Nominal));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Nominal object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Nominal object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Nominal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Nominal obj, out Exception exception)
        {
            exception = null;
            obj = default(Nominal);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Nominal obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static Nominal Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Nominal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Nominal Deserialize(Stream s)
        {
            return ((Nominal)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Nominal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Nominal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Nominal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Nominal obj, out Exception exception)
        {
            exception = null;
            obj = default(Nominal);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Nominal obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static Nominal LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:Specification
    /// Properties: base hc:Specification
    /// The Typical complex type shall define specification(s) that the instrument is expected to meet.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Typical : Specification
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Nullable<double> _expectedSuccessRange;

        private static XmlSerializer serializer;

        /// <summary>
        /// The percentage of actual instruments that would be expected to actually meet the specification (expressed as a percentage). Example: 95.
        /// </summary>
        [XmlAttribute]
        public double expectedSuccessRange
        {
            get
            {
                if (_expectedSuccessRange.HasValue)
                {
                    return _expectedSuccessRange.Value;
                }
                else
                {
                    return default(double);
                }
            }
            set
            {
                _expectedSuccessRange = value;
            }
        }

        [XmlIgnore]
        public bool expectedSuccessRangeSpecified
        {
            get
            {
                return _expectedSuccessRange.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _expectedSuccessRange = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Typical));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Typical object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Typical object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Typical object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Typical obj, out Exception exception)
        {
            exception = null;
            obj = default(Typical);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Typical obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static Typical Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Typical)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Typical Deserialize(Stream s)
        {
            return ((Typical)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Typical object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Typical object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Typical object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Typical obj, out Exception exception)
        {
            exception = null;
            obj = default(Typical);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Typical obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static Typical LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Base type: Extension of hc:Specification
    /// Properties: base hc:Specification
    /// The Guaranteed complex type shall be the base type for XML schema elements intended to document the specifications of the hardware item that are the basis for determining whether the hardware item is in need of repair. Should the hardware item not meet the specifications provided by Guaranteed, the hardware item should be classified as either unhealthy or not functioning.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    public partial class Guaranteed : Specification
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Guaranteed));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Guaranteed object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Guaranteed object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Guaranteed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Guaranteed obj, out Exception exception)
        {
            exception = null;
            obj = default(Guaranteed);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Guaranteed obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public new static Guaranteed Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Guaranteed)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Guaranteed Deserialize(Stream s)
        {
            return ((Guaranteed)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Guaranteed object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Guaranteed object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Guaranteed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Guaranteed obj, out Exception exception)
        {
            exception = null;
            obj = default(Guaranteed);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Guaranteed obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static Guaranteed LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// The SpecificationConditions complex type shall identify the conditions under which the specification is valid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon")]
    [XmlRootAttribute(Namespace = "urn:IEEE-1671:2010:HardwareCommon", IsNullable = true)]
    public partial class SpecificationConditions
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> _condition;

        private static XmlSerializer serializer;

        /// <summary>
        /// Base type: c:NonBlankString
        /// Properties: isRef 0, content simple
        /// Facets: minLength 1, whiteSpace replace
        /// The SpecificationConditions/Condition child element shall identify a specification condition (e.g., the instrument specification shall be considered valid only after a 30 min warm-up period).
        /// </summary>
        [XmlElementAttribute("Condition", Order = 0)]
        public List<string> Condition
        {
            get
            {
                return _condition;
            }
            set
            {
                _condition = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(SpecificationConditions));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Condition should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCondition()
        {
            return Condition != null && Condition.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SpecificationConditions object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SpecificationConditions object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SpecificationConditions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SpecificationConditions obj, out Exception exception)
        {
            exception = null;
            obj = default(SpecificationConditions);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SpecificationConditions obj)
        {
            Exception exception;
            return Deserialize(input, out obj, out exception);
        }

        public static SpecificationConditions Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((SpecificationConditions)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SpecificationConditions Deserialize(Stream s)
        {
            return ((SpecificationConditions)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SpecificationConditions object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SpecificationConditions object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SpecificationConditions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SpecificationConditions obj, out Exception exception)
        {
            exception = null;
            obj = default(SpecificationConditions);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SpecificationConditions obj)
        {
            Exception exception;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SpecificationConditions LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
