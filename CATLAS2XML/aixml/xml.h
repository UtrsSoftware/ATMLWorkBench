/*
* Copyright (c) 2014 Universal Technical Resource Services, Inc.
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

#pragma once

#include <string>
#include <map>

#include "helper.h"

using namespace std;

class XML
{
public:

	enum ElementName
	{
		enUnknown,
		enAlasSource,
		enFile,
		enOrganization,
		enForm,
		enRecordType,
		enRecordLength,
		enAtlas,
		enSignalOrientedStatements,
		enApplyStatement,
		enApplies,
		enSignalComponent,
		enNoun,
		enNounModifier,
		enFunction,
		enConnector,
		enIeee_1641,
		enTSF,
		enBSC,
		enAttribute,
		enQualifiers,
		enQualifier,
		enRange,
		enNumber,
		enEvent,
		enFrom,
		enTo,
		enThru,
		enStart,
		enEnd,
		enText,
		enErrorLimit,
		enBy,
		enContinuous,
		enRequireStatement,
		enRequires,
		enRequiresByVirtualLabel,
		enRequiresBySystemName,
		enMeasureStatement,
		enMeasures,
		enApply,
		enNounModifiers,
		enRanges,
		enNumbers,
		enSettings,
		enSetting,
		enCapability,
		enLineLength,
		enPageSize,
		enHardCopy,
		enAc,
		enDc,
		enRequire,
		enAtlasSources,
		enDefinition,
		enRequireTypes,
		enRequireType,
		enControl,
		enModifiers,
		enModifier,
		enLimit,
		enMaximums,
		enMaximum,
		enChannelA,
		enChannelB,
		enMeasure,
		enMeasuredCharacteristics,
		enMeasuredCharacteristic,
		enModifierFunctions,
		enModifierFunction,
		enConnection,
		enCnx,
		enRef,
		enDescriptors,
		enDescriptor,
		enPins,
		enPin,
		enImage,
		enHorizontalTiming,
		enVerticalTiming,
		enNonInterlace,
		enInterlace,
		enSync,
		enOnVideo,
		enType,
		enSerration,
		enSyncPolarity,
		enHorizontal,
		enVertical,
		enComposite,
		enVideo,
		enDraw,
		enTtl,
		enSignals,
		enSignal,
		enStatements,
		enStatement,
		enSignalName,
		enSoureFiles,
		enUut,
		enProcedureCallHierarchy,
		enPerform,
		enParameters,
		enParameter,
		enProcedures,
		enProcedure,
		enResults,
		enResult,
		enVerifyStatement,
		enVerifies,
		enVerify,
		enEvaluations,
		enEvaluation,
		enSetupStatement,
		enSetups,
		enSetup,
		enReadStatement,
		enReads,
		enRead,
		enReadDateTimes,
		enReadDateTime,
		enMonitorStatement,
		enMonitors,
		enMonitor,
		enInitiateStatement,
		enInitiates,
		enInitiate,
		enRemoveStatement,
		enRemoves,
		enRemove,
		enComplexSignal,
		enFetchStatement,
		enFetches,
		enFetch,
		enGated,
		enConnectStatement,
		enConnects,
		enConnect,
		enDisconnectStatement,
		enDisconnects,
		enDisconnect,
		enArmStatement,
		enArms,
		enArm,
		enChangeStatement,
		enChanges,
		enChange,
		enResetStatement,
		enResets,
		enReset,
		enDeclares,
		enDeclare,
		enPreamble,
		enRequiresBySignal,
		enRequiresByClass,
		enInstrumentClasses,
		enInstrumentClass,
		enResources,
		enResource,
		enDatetime,
		enCondition,
		enLower,
		enUpper,
		enBoolean,
		enUpperLimit,
		enLowerLimit,
		enIndex,
		enLeft,
		enRight,
		enArithmetic,
		enCompare,
		enArithmeticFunction,
		enArgument,
		enBitwise,
		enIterator,
		enInitialize,
		enList,
		enVariable,
		enConstant,
		enBuiltInDeclares,
		enIdentifies,
		enIdentify,
		enCalculates,
		enCalculate,
		enCloses,		
		enClose,
		enCompares,		
		enDelays,		
		enDelay,
		enDisables,		
		enDisable,
		enDoExchanges,	
		enDoExchange,
		enEnables,		
		enEnable,
		enExecutes,		
		enExecute,
		enFills,		
		enFill,
		enFinishes,		
		enFinish,
		enOpens,		
		enOpen,
		enOutputs,		
		enOutput,
		enPrepares,		
		enPrepare,
		enWaitFors,		
		enWaitFor,
		enCloseStatement,
		enOpenStatement,
		enAssignment,
		enInputs,
		enInput,
		enExtends,
		enExtend,
		enAssign,
		enNominal,
		enConcurrentOperation,
		enSpecifies,
		enSpecify,
		enTarget,
		enComments,
		enComment,
		enLine,
		enLeaveAtlases,	
		enLeaveAtlas,
		enResumeAtlases,
		enResumeAtlas,
		enIPLBlocks,
		enIPLBlock,
		enIPLs,
		enIPL,
		enAssignmentsByStatement,
		enAssignmentsByValue,
		enTestNumbers,
		enTest,
		enVariables,
		enStatistics,
		enNouns,
		enAIXML
	};	

	enum AttributeName
	{
		anUnknown,
		anStatement,
		anFile,
		anStatementNumber, 
		anLineNumber,
		anId,
		anFileType,
		anProcedure,
		anUnit,
		anAccel,
		anAccelUnit,
		anType,
		anVersion,
		anEncoding,
		anProgramName,
		anCount,
		anValue,
		anVariable,
		anDescription,
		anSuffix,
		anPhase,
		anMaximum,
		anMinimum,
		anEventName,
		anClassCount,
		anVirtualLabel,
		anSystemName,
		anClass,
		anClassDescription,
		anNoun,
		anName,
		anDimension,
		anRed,
		anGreen,
		anBlue,
		anRedGreen,
		anRedBlue,
		anGreenBlue,
		anRedGreenBlue,
		anAmerican,
		anEuropean,
		anOn,
		anOff,
		anPositive,
		anNegative,
		anNouns,
		anRecursive,
		anCallStack,
		anNonAtlas,
		anListLength,
		anSecondaryType,
		anDataLength,
		anEntryPoint,
		anRefId,
		anAll,
		anScope,
		anDigitalFormat,
		anEvalType,
		anVariableName,
		anUnaryOperator,
		anOperator,
		anFunction,
		anMainProcedure,
		anUnhandledStatementType,
		anDigital,
		anIndex,
		anStartIndex,
		anThruIndex,
		anList,
		anManualIntervention,
		anNew,
		anAccess,
		anComplexSignal,
		anSpecifyType,
		anComplexFunction,
		anProcRefId,
		anLeaveProcedure,
		anResource,
		anRequire,
		anCommentRefId,
		anLines,
		anBranchPoint,
		anStartingLine,
		anIPLRefId,
		anStatementType,
		anAssignmentByExpression,
		anElseRefId,
		anTestNumber,
		anNumber,
		anBeginTest,
		anUnused,
		anUnusedCount,
		anCreateDateTime,
		anSignalOriented,
		anProcHier,
		anUnusedProc,
		anIEEE1641,
		anIEEE260_1
	};

	enum AttributeValue
	{
		avUnknown,
		avTrue,
		avFalse,
		avCass,
		avConstant,
		avVariable,
		avChar,
		avProgram,
		avModule,
		avSegment,
		avBoolean,
		avConnector,
		avDecimal,
		avInteger,
		avNonModule,
		avBit,
		avBits,
		avDigital,
		avNominal,
		avUpperLimit,
		avLowerLimit,
		avGreaterThan,
		avLessThan,
		avEqual,
		avNotEqual,
		avLessThanEqual,
		avGreaterThanEqual,
		avGlobal,
		avExternal,
		avLocal,
		avBinaryUnsignedPositive,
		avBinaryOnesComp,
		avBinaryTwoComp,
		avBinaryMagnitude,
		avBinaryCodedDecimal,
		avBinaryCodedDecimalMagnitude,
		avFileLocal,
		avSegmentLocal,
		avProcLocal,
		avProcParam,
		avProcResult,
		avBinary,
		avHexadecimal,
		avOctal,
		avLimits,
		avNot,
		avAnd,
		avOr,
		avXor,
		avAddition,
		avSubtraction,
		avMultiplication,
		avDivision,
		avExponentiation,
		avGreaterThanOperator,
		avLessThanOperator,
		avEqualOperator,
		avNotEqualOperator,
		avGreaterThanEqualOperator,
		avLessThanEqualOperator,
		avCompare,
		avABS_Function,
		avALOG_Function,
		avATAN_Function,
		avCOS_Function,
		avEXP_Function,
		avINT_Function,
		avLN_Function,
		avLOG_Function,
		avSIN_Function,
		avSQRT_Function,
		avTAN_Function,
		avShiftLeft,
		avShiftRight,
		avArithShiftLeft,
		avArithShiftRight,
		avRotateLeft,
		avRotateRight,
		avSequence,
		avList,
		avBuiltIn,
		avAssign,
		avBitwise,
		avArithmeticFunction,
		avArithmetic,
		avEnumeration,
		avHybridCass,
		avRtcass,
		avEcass,
		avProgramLookup,
		avModuleLookup,
		avYes,
		avNo
	};

	static const string& GetElementName( const ElementName eName );
	static const string& GetAttributeName( const AttributeName eName );
	static const string& GetAttributeValue( const AttributeValue eValue );

	static ElementName GetElementNameEnum( const string& strElementName );
	static AttributeName GetAttributeNameEnum( const string& strAttributeName );
	static AttributeValue GetAttributeValueEnum( const string& strAttributeValue );

	static string GetXmlVersionAndEncoding( const string& strVersion, const string& strEncoding );
	static string TranslateToXmlEncodings( const string& strArg );

	static void IncrementXMLIndent( unsigned int uiCount );
	static void DecrementXMLIndent( unsigned int uiCount );

	static string MakeXmlElementNoChildrenWithTextNode( const ElementName eName, const string& strTextNodeValue, const string& strAttib1 = string( ), const string& strAttib2 = string( ), const string& strAttib3 = string( ), const string& strAttib4 = string( ), const string& strAttib5 = string( ), const string& strAttib6 = string( ), const string& strAttib7 = string( ), const string& strAttib8 = string( ) );
	static string MakeXmlElementNoChildren( const ElementName eName, const string& strAttib1 = string( ), const string& strAttib2 = string( ), const string& strAttib3 = string( ), const string& strAttib4 = string( ), const string& strAttib5 = string( ), const string& strAttib6 = string( ), const string& strAttib7 = string( ), const string& strAttib8 = string( ) );
	static string MakeOpenXmlElementWithChildren( const ElementName eName, const string& strAttib1 = string( ), const string& strAttib2 = string( ), const string& strAttib3 = string( ), const string& strAttib4 = string( ), const string& strAttib5 = string( ), const string& strAttib6 = string( ), const string& strAttib7 = string( ), const string& strAttib8 = string( ) );
	static string MakeCloseXmlElementWithChildren( const ElementName eName );

	static string MakeXmlAttributeNameValue( const AttributeName eName, const AttributeValue eValue );
	static string MakeXmlAttributeNameValue( const AttributeName eName, const string& strValue );
	static string MakeXmlAttributeNameValue( const AttributeName eName, const int iValue );
	static string MakeXmlAttributeNameValue( const AttributeName eName, const unsigned int uiValue );
	static string MakeXmlAttributeNameValue( const AttributeName eName, const double dValue );

	static bool m_bXMLIndent;

protected:

	static const string m_strXMLElementBegin;
	static const string m_strXMLElementEnd;
	static const string m_strXMLElementCloseWithElement;
	static const string m_strXMLElementCloseWithoutElement;
	static const string m_strXMLAssign;
	static const string m_strSpace;
	static const string m_strDoubleQuote;

	static const string m_arrayElementNames[ ];
	static const string m_arrayAttributeNames[ ];
	static const string m_arrayAttributeValues[ ];
	static const unsigned int m_uiElementNameCount;
	static const unsigned int m_uiAttributeNameCount;
	static const unsigned int m_uiAttributeValueCount;
	static int m_iIndentCount;

	static map< const string*, ElementName, AIXMLHelper::cmpPointer > m_mapElemementNameToEnum;
	static map< const string*, AttributeName, AIXMLHelper::cmpPointer > m_mapAttributeNameToEnum;
	static map< const string*, AttributeValue, AIXMLHelper::cmpPointer > m_mapAttributeValueToEnum;
	static const bool m_bInitStatics;

	static bool InitStatics( void );

	static string InsertIndent( const bool bOpen );
};
