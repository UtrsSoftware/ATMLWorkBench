
#ifndef parser_h
#define parser_h

/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 //
//    PARSER.H

/*    Generated by: LRSTAR 6.8.009
      Grammar:      atlas.grm
      Skeleton:     skl\parser.h.skl
      Output:       parser.h
*/               
		#include "stdio.h"
		#include "lexer.h"

	// Defined constants for the tokens ... 
		enum def_con
		{
         T_STRING = 1,
         T_INTEGER = 2,
         T_DECIMAL = 3,
         T_DIGITAL = 4,
         T_EOF = 5,
         T_FIRSTID = 6,
         T_FIRSTPARTNO = 7,
         T_PARTNO = 8,
         T_IDENTIFIER = 9,
         T_LITERAL = 10,
         T_LUCOMMENT = 11,
         T_DATA = 12,
         T_CODE = 13,
         T_COMMENT = 14,
         T_EOS = 15,
         T_ENTRY = 20,
         T_BRANCH_TARGET = 21
		};

		class Symbol             
		{
		public:
			uchar*  name;	 // Pointer to symbol name.														 		
			int    length;	 // Length  of symbol name.														 
			int    level;	 // Level number for scope.                                        	 
			int    term;	 // Terminal number (e.g. <identifier>, <string>, {typedef}, ...)		 
         uint   type;	 // Type (e.g. integer, float, double, uchar, ...)							 
         uint   scope;	 // Scope (e.g. local(1), global(2), external(3)). 
			int    cell;	 // Hash vector cell number for deleting this symbol.						 
		};

		#define SCOPE_LOCAL    1
		#define SCOPE_GLOBAL   2
		#define SCOPE_EXTERNAL 4

		#define TYPE_PROCEDURE 1
		#define TYPE_SIGNAL    2

		class Symtab 
		{
		public:
			static Symbol*  symbol;			// Symbols.
			static int      n_symbols;		// Number of symbols.
			static int      n_keywords;	// Number of keywords in symbol table.
			static int      length;			// Current length of symbol name.
			static int      cell;			// Current hash cell number.
			static int      sti;				// Current symbol-table index.
			static uint     hashdiv;		// Hash divisor. 
			static int*     hashvec;		// Hash vector.
			static int      max_symbols;	// Maximum number of symbols.
			static int      max_cells;    // Maximum number of cells in the hash vector. 
		};

		class Node                
		{
		public:
			int    id;		 // Node id number    									4	 	
			int    prod;	 // Production number            					4	 	
			int    sti;     // Symbol-table index (perm or temp var).		4	 
			int    stmt;    // Statement count.										4	 
			int    prev;	 // Previous node.			   						4  
			int    next;	 // Next node.												4  
			int    line;    // Line number.                                4   
			int    child;   // Child node.                                	4   
			int    parent;  // Parent node.                             	4  36 bytes per node
		}; 
  
      class Stack
      {
         public:
         int    id;      // Node id.                      4	 	
         int    counter; // Counter of node accesses.     4	 8 bytes
      };

		class AST 
		{
			public:	
			static uchar     indent[256];	// Indentation for printing current node.
         static int*     counter;		// Node counter array.
         static int      stacki;			// AST stack index.
         static Stack*   stack;			// AST stack array.
			static Node*    node;			// AST node array.
			static int      root;			// Root node number.
			static int      n_nodes;		// Number of nodes.
			static int      max_nodes;		// Maximum number of nodes.
		};

	// AST Action Mode. 
      #define TOP_DOWN   0	 // Top down status.  
   	#define PASS_OVER  1  // Pass over status.
   	#define BOTTOM_UP  2  // Bottom up status.  
   
      class PStack // Parser stack.
      {
         public:
         int    state;	 // Parser state.                 4	 4	
         int    sti;     // Symbol table index.           4	 8	
         int    line;    // Input line number.            4	12	
         int    node;    // Node number.                  4	16	
         int    last;    // Last in list number.          4	20	bytes per cell.
			int    sym;     // Symbol stacked, terminal (positive) or nonterminal (negative). 
      };

      class RStack // Restore Stack.
      {
         public:
         PStack* ptr;	 // Parse stack pointer.			4	4	
         int     state;  // State.								4	8	bytes.
      };

      class parser : public lexer, public Symtab, public AST 
		{
			public:
			static int   init(int, int);	// Parser initialization.
			static void  term();				// Parser termination.
			static int   parse			(int& n_errs, int& n_stmts, int& nu);	
			static void  parse_term		();	
			static int   add_symbol		(int, uchar*, uchar*);
			static int   get_symbol		(uchar*, uchar*); 
			static int   emitstr			(int, uchar*);
			static uchar* symbol_name	(int);
			static uchar* remove_quotes (uchar* arg);

			static PStack* PS;				// Parse Stack pointer. 

			static int   tact_arg[];		// Token-action argument index (for first arg).
			static int   pact_arg[];		// Parse-action argument index (for first arg).
			static int   nact_arg[];		// Node-action  argument index (for first arg).
			static int   arg_numb[];		// Argument numbers. 

			static char* arg_text[];		// Argument text (if a string argument or node arg).
			static char* term_symb[];
			static char* head_symb[];
			static char* node_name[];

			static int   status;				// Status for parser actions and AST actions.
			static int   nd_mode;			// Nondeterministic mode of parsing.
			static int   n_errors;			// Number of errors.
			static int   n_unknowns;		// Number of unknown statements.
			static int   n_statements;		// Number of statements parsed.
			static int   in_pgm;				// Number of statements parsed.
			static int   in_mod;				// Number of statements parsed.
			static int   in_seg;				// Number of statements parsed.
			static int   n_pgm_statements;	// Number of statements parsed.
			static int   n_mod_statements;	// Number of statements parsed.
			static int   n_seg_statements;	// Number of statements parsed.
			static int   n_includefiles;	// Number of include files specified.
			static int   nd_level_max;

			private:
		// Parser functions
			static int		nd_lookahead	(PStack*, PStack*, int, int);
			static int		nd_parse			(PStack*, PStack*, PStack*, int x, int t, int a);
			static int    	restore			();
			static PStack*	recover			(PStack* PS, int t);
			static int		reduce			(int p);
			static int		linkup			(int p);
			static void		prt_error		(uchar*);
			static void		prt_prod			(uchar*, int, uchar*); 
			static void		prt_stack		(); 
			static void		expecting		(); 
			static void		collect			(int x);
			static void    sort_names		(uchar**, int, int*);

		// Symtab functions
			static int		init_symtab		(int);		// Initialize the symbol table.
			static void		term_symtab		();			// Terminate  the symbol table.
			static void		print_symtab	(uchar**);
         static void		prt_line			();

		// AST functions
			static int		init_ast			(int);
			static void		term_ast			();
			static void		print_ast		();
			static void		print_ast		(int n);
			static void		print_node		(uchar *indent, int n);
         static void		traverse			();
         static void		traverse			(int n);
			static void		traverse			(uchar *indent, int n);
		};

#endif

